!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CC	Makefile	/^CC := gcc$/;"	m
CC	xenaccess/Makefile	/^CC:= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -fPIC$/;"	m
CFLAGS	xenaccess/Makefile	/^CFLAGS:= -fPIC$/;"	m
CONFIG_STR_LENGTH	xenaccess/config/config_parser.h	34;"	d
DW_REQ_block	offset.c	/^    DW_REQ_block = 0x40,$/;"	e	enum:__anon1	file:
DW_REQ_level	offset.c	/^    DW_REQ_level = 0x2,$/;"	e	enum:__anon1	file:
DW_REQ_name	offset.c	/^    DW_REQ_name = 0x20,$/;"	e	enum:__anon1	file:
DW_REQ_offset	offset.c	/^    DW_REQ_offset = 0x4,$/;"	e	enum:__anon1	file:
DW_REQ_scope	offset.c	/^    DW_REQ_scope = 0x1,$/;"	e	enum:__anon1	file:
DW_REQ_sibling	offset.c	/^    DW_REQ_sibling = 0x8,$/;"	e	enum:__anon1	file:
DW_REQ_tag	offset.c	/^    DW_REQ_tag = 0x10,$/;"	e	enum:__anon1	file:
Dwarf_Request	offset.c	/^} Dwarf_Request;$/;"	t	typeref:struct:__anon2	file:
EBLHOOK	elfutils/libeblP.h	76;"	d
EBLHOOK	elfutils/libeblP.h	78;"	d
ImageBaseAddress	xenaccess/xenaccess.h	/^    uint32_t ImageBaseAddress; \/**< initial address of executable code *\/$/;"	m	struct:xa_windows_peb
LFLAGS	Makefile	/^LFLAGS := -lxenctrl$/;"	m
LIB_XEN_ACCESS_H	xenaccess/xenaccess.h	37;"	d
MAX_IMAGE_TYPE_LEN	xenaccess/xa_core.c	557;"	d	file:
MAX_ROW_LENGTH	xenaccess/xa_private.h	54;"	d
MAX_SYM_LEN	xenaccess/xa_cache.c	38;"	d	file:
NUM_BASE_ADDRESSES	xenaccess/windows_memory.c	121;"	d	file:
OBJECTS	Makefile	/^OBJECTS := xenaccess\/linux_core.o$/;"	m
OBJECTS	xenaccess/Makefile	/^OBJECTS:= ..\/xenaccess\/linux_core.o$/;"	m
ProcessHeap	xenaccess/xenaccess.h	/^    uint32_t ProcessHeap;      \/**< initial address of the heap *\/$/;"	m	struct:xa_windows_peb
TARGET	Makefile	/^TARGET := openfile-list$/;"	m
VERSION_STR_LEN	xenaccess/xa_core.c	332;"	d	file:
XA_CACHE_SIZE	xenaccess/xa_private.h	87;"	d
XA_ECRITICAL	xenaccess/xa_private.h	58;"	d
XA_EMINOR	xenaccess/xa_private.h	59;"	d
XA_ENONE	xenaccess/xa_private.h	57;"	d
XA_FAILHARD	xenaccess/xenaccess.h	88;"	d
XA_FAILSOFT	xenaccess/xenaccess.h	97;"	d
XA_FAILURE	xenaccess/xenaccess.h	79;"	d
XA_FILETYPE_DD	xenaccess/xenaccess.h	70;"	d
XA_MODE_FILE	xenaccess/xenaccess.h	64;"	d
XA_MODE_XEN	xenaccess/xenaccess.h	59;"	d
XA_OS_LINUX	xenaccess/xenaccess.h	102;"	d
XA_OS_WINDOWS	xenaccess/xenaccess.h	107;"	d
XA_PID_CACHE_SIZE	xenaccess/xa_private.h	88;"	d
XA_PRIVATE_H	xenaccess/xa_private.h	34;"	d
XA_SUCCESS	xenaccess/xenaccess.h	75;"	d
XA_XENVER_3_0_4	xenaccess/xenaccess.h	118;"	d
XA_XENVER_3_1_0	xenaccess/xenaccess.h	123;"	d
XA_XENVER_3_1_1	xenaccess/xenaccess.h	128;"	d
XA_XENVER_3_1_2	xenaccess/xenaccess.h	133;"	d
XA_XENVER_3_1_3	xenaccess/xenaccess.h	138;"	d
XA_XENVER_3_1_4	xenaccess/xenaccess.h	143;"	d
XA_XENVER_3_2_0	xenaccess/xenaccess.h	148;"	d
XA_XENVER_3_2_1	xenaccess/xenaccess.h	153;"	d
XA_XENVER_3_2_2	xenaccess/xenaccess.h	158;"	d
XA_XENVER_3_3_0	xenaccess/xenaccess.h	163;"	d
XA_XENVER_UNKNOWN	xenaccess/xenaccess.h	113;"	d
XENMEM_maximum_gpfn	xenaccess/xa_memory.c	38;"	d	file:
_	elfutils/libeblP.h	93;"	d
_	elfutils/libeblP.h	94;"	d
_GNU_SOURCE	xenaccess/windows_process.c	30;"	d	file:
_GNU_SOURCE	xenaccess/xa_cache.c	33;"	d	file:
_GNU_SOURCE	xenaccess/xa_core.c	37;"	d	file:
_LIBEBLP_H	elfutils/libeblP.h	51;"	d
_MEMORY_ACCESS_H	elfutils/memory-access.h	52;"	d
_OFFSET_H	offset.h	2;"	d
__libdw_get_sleb128	elfutils/memory-access.h	/^__libdw_get_sleb128 (int64_t acc, unsigned int i, const unsigned char **addrp)$/;"	f
__libdw_get_uleb128	elfutils/memory-access.h	/^__libdw_get_uleb128 (uint64_t acc, unsigned int i, const unsigned char **addrp)$/;"	f
addr	xenaccess/config/config_parser.h	/^            int addr; $/;"	m	struct:xa_config_entry::__anon3::linux_offsets
addr_offset	xenaccess/xenaccess.h	/^            int addr_offset;     \/**< mm_struct->start_code *\/$/;"	m	struct:xa_instance::__anon4::linux_instance
addrsize	offset.c	/^    unsigned int addrsize;$/;"	m	struct:attrcb_args	file:
arg_end	xenaccess/xenaccess.h	/^    unsigned long arg_end;     \/**< final address of command-line arguments *\/$/;"	m	struct:xa_linux_taskaddr
arg_stack	xenaccess/xenaccess.h	/^    unsigned long arg_stack;   \/**< initial address of command-line arguments *\/$/;"	m	struct:xa_linux_taskaddr
assignment	xenaccess/config/grammar.y	/^assignment:$/;"	l
assignments	xenaccess/config/grammar.y	/^assignments:$/;"	l
attrcb_args	offset.c	/^struct attrcb_args$/;"	s	file:
attribute_hidden	elfutils/memory-access.h	/^     internal_function attribute_hidden;$/;"	v
base_from	offset.c	/^Dwarf_Off base_from, base_to; \/* avoid searching for "base.c" repeatedly *\/$/;"	v
base_to	offset.c	/^Dwarf_Off base_from, base_to; \/* avoid searching for "base.c" repeatedly *\/$/;"	v
bf_get_ntoskrnl_base	xenaccess/windows_memory.c	/^uint32_t bf_get_ntoskrnl_base (xa_instance_t *instance)$/;"	f
bf_test_ntoskrnl_base	xenaccess/windows_memory.c	/^int bf_test_ntoskrnl_base (xa_instance_t *instance, uint32_t base)$/;"	f
block	offset.c	/^    unsigned int block;$/;"	m	struct:__anon2	file:
brk	xenaccess/xenaccess.h	/^    unsigned long brk;         \/**< current final address of the heap *\/$/;"	m	struct:xa_linux_taskaddr
buffalo_nopae	xenaccess/xa_memory.c	/^void buffalo_nopae (xa_instance_t *instance, uint32_t entry, int pde)$/;"	f
cache_head	xenaccess/xenaccess.h	/^    xa_cache_entry_t cache_head;         \/**< head of the address cache list *\/$/;"	m	struct:xa_instance
cache_tail	xenaccess/xenaccess.h	/^    xa_cache_entry_t cache_tail;         \/**< tail of the address cache list *\/$/;"	m	struct:xa_instance
cr3	xenaccess/xenaccess.h	/^    uint32_t cr3;           \/**< value in the CR3 register *\/$/;"	m	struct:xa_instance
cu_offset	offset.c	/^    Dwarf_Off cu_offset;$/;"	m	struct:attrcb_args	file:
current_cache_size	xenaccess/xenaccess.h	/^    int current_cache_size;              \/**< size of the address cache list *\/$/;"	m	struct:xa_instance
current_pid_cache_size	xenaccess/xenaccess.h	/^    int current_pid_cache_size;          \/**< size of the pid cache list *\/$/;"	m	struct:xa_instance
data	elfutils/libeblP.h	/^  uint_fast8_t data;$/;"	m	struct:ebl
dbg	offset.c	/^    Dwarf *dbg;$/;"	m	struct:attrcb_args	file:
dlhandle	elfutils/libeblP.h	/^  void *dlhandle;$/;"	m	struct:ebl
domain_id	xenaccess/xenaccess.h	/^            uint32_t domain_id;  \/**< domid that we are accessing *\/$/;"	m	struct:xa_instance::__anon5::xen
domain_info	xenaccess/config/grammar.y	/^domain_info:$/;"	l
domain_name	xenaccess/config/config_parser.h	/^    char domain_name[CONFIG_STR_LENGTH];$/;"	m	struct:xa_config_entry
domains	xenaccess/config/grammar.y	/^domains:$/;"	l
dwflmod	offset.c	/^    Dwfl_Module *dwflmod;$/;"	m	struct:attrcb_args	file:
ebl	elfutils/libeblP.h	/^struct ebl$/;"	s
ebl_bhinit_t	elfutils/libeblP.h	/^typedef const char *(*ebl_bhinit_t) (Elf *, GElf_Half, Ebl *, size_t);$/;"	t
elf	elfutils/libeblP.h	/^  Elf *elf;$/;"	m	struct:ebl
emulation	elfutils/libeblP.h	/^  const char *emulation;$/;"	m	struct:ebl
end_code	xenaccess/xenaccess.h	/^    unsigned long end_code;    \/**< final address of executable code *\/$/;"	m	struct:xa_linux_taskaddr
end_data	xenaccess/xenaccess.h	/^    unsigned long end_data;    \/**< final address of initialized data *\/$/;"	m	struct:xa_linux_taskaddr
entry_present	xenaccess/xa_memory.c	/^int entry_present (unsigned long entry){$/;"	f
env_end	xenaccess/xenaccess.h	/^    unsigned long env_end;     \/**< final address of environmental vars *\/$/;"	m	struct:xa_linux_taskaddr
env_start	xenaccess/xenaccess.h	/^    unsigned long env_start;   \/**< initial address of environmental vars *\/$/;"	m	struct:xa_linux_taskaddr
error_mode	xenaccess/xenaccess.h	/^    uint32_t error_mode;    \/**< XA_FAILHARD or XA_FAILSOFT *\/$/;"	m	struct:xa_instance
fhandle	xenaccess/xenaccess.h	/^            FILE *fhandle;       \/**< handle to the memory image file *\/$/;"	m	struct:xa_instance::__anon5::file
file	xenaccess/xenaccess.h	/^        struct file{$/;"	s	union:xa_instance::__anon5
file	xenaccess/xenaccess.h	/^        } file;$/;"	m	union:xa_instance::__anon5	typeref:struct:xa_instance::__anon5::file
fill_parent_dir	openfile-list.c	/^int fill_parent_dir(char *buf, $/;"	f
find_comp_unit	offset.c	/^static int find_comp_unit(Dwarf_Off *from,$/;"	f	file:
find_no_debuginfo	offset.c	/^static int find_no_debuginfo(Dwfl_Module *mod __attribute__ ((unused)),$/;"	f	file:
find_struct	offset.c	/^static int find_struct(Dwarf_Off *from, $/;"	f	file:
find_struct_member	offset.c	/^static int find_struct_member(unsigned int *offset,$/;"	f	file:
fpp	xenaccess/xa_private.h	51;"	d
get_dentry_offsets	offset.c	/^int get_dentry_offsets(int *d_parent_offset, $/;"	f
get_fd_offsets	offset.c	/^int get_fd_offsets(int *f_dentry_offset, int *f_vfsmnt_offset, const char *fsym)$/;"	f
get_fdt_offsets	offset.c	/^int get_fdt_offsets(int *max_fds_offset, int *fd_offset, const char *fsym)$/;"	f
get_files_offsets	offset.c	/^int get_files_offsets(int *fdt_offset, const char *fsym)$/;"	f
get_kpgd_method1	xenaccess/windows_core.c	/^int get_kpgd_method1 (xa_instance_t *instance, uint32_t *sysproc)$/;"	f
get_kpgd_method2	xenaccess/windows_core.c	/^int get_kpgd_method2 (xa_instance_t *instance, uint32_t *sysproc)$/;"	f
get_large_paddr	xenaccess/xa_memory.c	/^uint32_t get_large_paddr ($/;"	f
get_memory_size	xenaccess/xa_core.c	/^int get_memory_size (xa_instance_t *instance)$/;"	f
get_ntoskrnl_base	xenaccess/windows_memory.c	/^uint32_t get_ntoskrnl_base (xa_instance_t *instance)$/;"	f
get_ops	offset.c	/^static int get_ops(unsigned int *ops, $/;"	f	file:
get_paddr_nopae	xenaccess/xa_memory.c	/^uint32_t get_paddr_nopae (uint32_t vaddr, uint32_t pte){$/;"	f
get_paddr_pae	xenaccess/xa_memory.c	/^uint64_t get_paddr_pae (uint32_t vaddr, uint64_t pte){$/;"	f
get_page_info_xen	xenaccess/xa_core.c	/^int get_page_info_xen (xa_instance_t *instance)$/;"	f
get_pdpi	xenaccess/xa_memory.c	/^uint64_t get_pdpi ($/;"	f
get_pdptb	xenaccess/xa_memory.c	/^uint32_t get_pdptb (uint32_t pdpr){$/;"	f
get_pgd_nopae	xenaccess/xa_memory.c	/^uint32_t get_pgd_nopae ($/;"	f
get_pgd_pae	xenaccess/xa_memory.c	/^uint64_t get_pgd_pae ($/;"	f
get_prototype_bit	xenaccess/xa_memory.c	/^int get_prototype_bit(uint32_t entry)$/;"	f
get_pte_nopae	xenaccess/xa_memory.c	/^uint32_t get_pte_nopae (xa_instance_t *instance, uint32_t vaddr, uint32_t pgd){$/;"	f
get_pte_pae	xenaccess/xa_memory.c	/^uint64_t get_pte_pae (xa_instance_t *instance, uint32_t vaddr, uint64_t pgd){$/;"	f
get_qstr_offsets	offset.c	/^int get_qstr_offsets(int *len_offset, int *name_offset, const char *fsym)$/;"	f
get_rva	xenaccess/windows_symbols.c	/^uint32_t get_rva (char *row)$/;"	f
get_sleb128	elfutils/memory-access.h	98;"	d
get_sleb128_rest_return	elfutils/memory-access.h	106;"	d
get_sleb128_step	elfutils/memory-access.h	88;"	d
get_symbol_row	xenaccess/xa_symbols.c	/^int get_symbol_row (FILE *f, char *row, char *symbol, int position)$/;"	f
get_task_offsets	offset.c	/^int get_task_offsets(int *tasks_offset,$/;"	f
get_transition_bit	xenaccess/xa_memory.c	/^int get_transition_bit(uint32_t entry)$/;"	f
get_uleb128	elfutils/memory-access.h	67;"	d
get_uleb128_rest_return	elfutils/memory-access.h	75;"	d
get_uleb128_step	elfutils/memory-access.h	61;"	d
get_vfsmnt_offsets	offset.c	/^int get_vfsmnt_offsets(int *mnt_devname_offset, const char *fsym)$/;"	f
helper_destroy	xenaccess/xa_core.c	/^int helper_destroy (xa_instance_t *instance)$/;"	f
helper_init	xenaccess/xa_core.c	/^int helper_init (xa_instance_t *instance)$/;"	f
helper_pfn_to_mfn	xenaccess/xa_memory.c	/^unsigned long helper_pfn_to_mfn (xa_instance_t *instance, unsigned long pfn)$/;"	f
hvm	xenaccess/xenaccess.h	/^    int hvm;                \/**< nonzero if HVM memory image *\/$/;"	m	struct:xa_instance
iba	xenaccess/config/config_parser.h	/^            int iba;$/;"	m	struct:xa_config_entry::__anon3::windows_offsets
iba_offset	xenaccess/xenaccess.h	/^            int iba_offset;      \/**< EPROCESS->Peb.ImageBaseAddress *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
image_type	xenaccess/xenaccess.h	/^    char *image_type;       \/**< image type that we are accessing *\/$/;"	m	struct:xa_instance
info	xenaccess/xenaccess.h	/^            xc_dominfo_t info;   \/**< libxc info: domid, ssidref, stats, etc *\/$/;"	m	struct:xa_instance::__anon5::xen
init_page_offset	xenaccess/xa_core.c	/^void init_page_offset (xa_instance_t *instance)$/;"	f
init_task	xenaccess/xenaccess.h	/^    uint32_t init_task;     \/**< address of task struct for init *\/$/;"	m	struct:xa_instance
init_xen_version	xenaccess/xa_core.c	/^void init_xen_version (xa_instance_t *instance)$/;"	f
kpgd	xenaccess/xenaccess.h	/^    uint32_t kpgd;          \/**< kernel page global directory *\/$/;"	m	struct:xa_instance
last_used	xenaccess/xenaccess.h	/^    time_t last_used;$/;"	m	struct:xa_cache_entry
last_used	xenaccess/xenaccess.h	/^    time_t last_used;$/;"	m	struct:xa_pid_cache_entry
level	offset.c	/^    int level;$/;"	m	struct:attrcb_args	file:
level	offset.c	/^    unsigned int level;$/;"	m	struct:__anon2	file:
linux_access_kernel_symbol	xenaccess/linux_memory.c	/^void *linux_access_kernel_symbol ($/;"	f
linux_addr_assignment	xenaccess/config/grammar.y	/^linux_addr_assignment:$/;"	l
linux_get_taskstruct	xenaccess/linux_memory.c	/^unsigned char *linux_get_taskstruct ($/;"	f
linux_init	xenaccess/linux_core.c	/^int linux_init (xa_instance_t *instance)$/;"	f
linux_instance	xenaccess/xenaccess.h	/^        struct linux_instance{$/;"	s	union:xa_instance::__anon4
linux_instance	xenaccess/xenaccess.h	/^        } linux_instance;$/;"	m	union:xa_instance::__anon4	typeref:struct:xa_instance::__anon4::linux_instance
linux_mm_assignment	xenaccess/config/grammar.y	/^linux_mm_assignment:$/;"	l
linux_offsets	xenaccess/config/config_parser.h	/^        struct linux_offsets {$/;"	s	union:xa_config_entry::__anon3
linux_offsets	xenaccess/config/config_parser.h	/^        } linux_offsets;$/;"	m	union:xa_config_entry::__anon3	typeref:struct:xa_config_entry::__anon3::linux_offsets
linux_pgd_assignment	xenaccess/config/grammar.y	/^linux_pgd_assignment:$/;"	l
linux_pid_assignment	xenaccess/config/grammar.y	/^linux_pid_assignment:$/;"	l
linux_pid_to_pgd	xenaccess/linux_memory.c	/^uint32_t linux_pid_to_pgd (xa_instance_t *instance, int pid)$/;"	f
linux_predict_sysmap_name	xenaccess/linux_domain_info.c	/^char *linux_predict_sysmap_name (uint32_t id)$/;"	f
linux_system_map_symbol_to_address	xenaccess/linux_symbols.c	/^int linux_system_map_symbol_to_address ($/;"	f
linux_tasks_assignment	xenaccess/config/grammar.y	/^linux_tasks_assignment:$/;"	l
live_pfn_to_mfn_table	xenaccess/xenaccess.h	/^            unsigned long *live_pfn_to_mfn_table;$/;"	m	struct:xa_instance::__anon5::xen
m	xenaccess/xenaccess.h	/^    } m;$/;"	m	struct:xa_instance	typeref:union:xa_instance::__anon5
mach_address	xenaccess/xenaccess.h	/^    uint32_t mach_address;$/;"	m	struct:xa_cache_entry
machine	elfutils/libeblP.h	/^  uint_fast16_t machine;$/;"	m	struct:ebl
main	openfile-list.c	/^int main (int argc, char **argv)$/;"	f
match	offset.c	/^    unsigned int match; \/\/ match only the fields specified here$/;"	m	struct:__anon2	file:
matched	offset.c	/^    int matched;$/;"	m	struct:attrcb_args	file:
mm	xenaccess/config/config_parser.h	/^            int mm;$/;"	m	struct:xa_config_entry::__anon3::linux_offsets
mm_offset	xenaccess/xenaccess.h	/^            int mm_offset;       \/**< task_struct->mm *\/$/;"	m	struct:xa_instance::__anon4::linux_instance
mode	xenaccess/xenaccess.h	/^    uint32_t mode;          \/**< file or xen VM data source *\/$/;"	m	struct:xa_instance
name	elfutils/libeblP.h	/^  const char *name;$/;"	m	struct:ebl
name	offset.c	/^    char *name;$/;"	m	struct:__anon2	file:
name_dir	offset.c	/^    int name_dir;$/;"	m	struct:__anon2	file:
next	xenaccess/xenaccess.h	/^    struct xa_cache_entry *next;$/;"	m	struct:xa_cache_entry	typeref:struct:xa_cache_entry::xa_cache_entry
next	xenaccess/xenaccess.h	/^    struct xa_pid_cache_entry *next;$/;"	m	struct:xa_pid_cache_entry	typeref:struct:xa_pid_cache_entry::xa_pid_cache_entry
nr_pfns	xenaccess/xenaccess.h	/^            unsigned long nr_pfns;$/;"	m	struct:xa_instance::__anon5::xen
ntoskrnl	xenaccess/xenaccess.h	/^            uint32_t ntoskrnl;   \/**< base phys address for ntoskrnl image *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
offset	offset.c	/^    Dwarf_Off offset;$/;"	m	struct:__anon2	file:
offsets	xenaccess/config/config_parser.h	/^    } offsets;$/;"	m	struct:xa_config_entry	typeref:union:xa_config_entry::__anon3
os	xenaccess/xenaccess.h	/^    } os;$/;"	m	struct:xa_instance	typeref:union:xa_instance::__anon4
os_type	xenaccess/xenaccess.h	/^    int os_type;            \/**< type of os: XA_OS_LINUX, etc *\/$/;"	m	struct:xa_instance
ostype	xenaccess/config/config_parser.h	/^    char ostype[CONFIG_STR_LENGTH];$/;"	m	struct:xa_config_entry
ostype_assignment	xenaccess/config/grammar.y	/^ostype_assignment:$/;"	l
p	elfutils/memory-access.h	/^    void *p;$/;"	m	union:unaligned
pae	xenaccess/xenaccess.h	/^    int pae;                \/**< nonzero if PAE is enabled *\/$/;"	m	struct:xa_instance
page_offset	xenaccess/xenaccess.h	/^    uint32_t page_offset;   \/**< page offset for this instance *\/$/;"	m	struct:xa_instance
page_shift	xenaccess/xenaccess.h	/^    uint32_t page_shift;    \/**< page shift for last mapped page *\/$/;"	m	struct:xa_instance
page_size	xenaccess/xenaccess.h	/^    uint32_t page_size;     \/**< page size for last mapped page *\/$/;"	m	struct:xa_instance
page_size_flag	xenaccess/xa_memory.c	/^int page_size_flag (unsigned long entry){$/;"	f
pdba_base_nopae	xenaccess/xa_memory.c	/^uint32_t pdba_base_nopae (uint32_t pdpe){$/;"	f
pdba_base_pae	xenaccess/xa_memory.c	/^uint64_t pdba_base_pae (uint64_t pdpe){$/;"	f
pdbase	xenaccess/config/config_parser.h	/^            int pdbase;$/;"	m	struct:xa_config_entry::__anon3::windows_offsets
pdbase_offset	xenaccess/xenaccess.h	/^            int pdbase_offset;   \/**< EPROCESS->Pcb.DirectoryTableBase *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
pdpi_index	xenaccess/xa_memory.c	/^uint32_t pdpi_index (uint32_t pdpi){$/;"	f
peb	xenaccess/config/config_parser.h	/^            int peb;$/;"	m	struct:xa_config_entry::__anon3::windows_offsets
peb_offset	xenaccess/xenaccess.h	/^            int peb_offset;      \/**< EPROCESS->Peb *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
pgd	xenaccess/config/config_parser.h	/^            int pgd;$/;"	m	struct:xa_config_entry::__anon3::linux_offsets
pgd	xenaccess/xenaccess.h	/^    uint32_t pgd;$/;"	m	struct:xa_pid_cache_entry
pgd_index	xenaccess/xa_memory.c	/^uint32_t pgd_index (xa_instance_t *instance, uint32_t address){$/;"	f
pgd_offset	xenaccess/xenaccess.h	/^            int pgd_offset;      \/**< mm_struct->pgd *\/$/;"	m	struct:xa_instance::__anon4::linux_instance
ph	xenaccess/config/config_parser.h	/^            int ph;$/;"	m	struct:xa_config_entry::__anon3::windows_offsets
ph_offset	xenaccess/xenaccess.h	/^            int ph_offset;       \/**< EPROCESS->Peb.ProcessHeap *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
pid	xenaccess/config/config_parser.h	/^            int pid;$/;"	m	struct:xa_config_entry::__anon3::linux_offsets
pid	xenaccess/config/config_parser.h	/^            int pid;$/;"	m	struct:xa_config_entry::__anon3::windows_offsets
pid	xenaccess/xenaccess.h	/^    int pid;$/;"	m	struct:xa_cache_entry
pid	xenaccess/xenaccess.h	/^    int pid;$/;"	m	struct:xa_pid_cache_entry
pid_cache_head	xenaccess/xenaccess.h	/^    xa_pid_cache_entry_t pid_cache_head; \/**< head of the pid cache list *\/$/;"	m	struct:xa_instance
pid_cache_tail	xenaccess/xenaccess.h	/^    xa_pid_cache_entry_t pid_cache_tail; \/**< tail of the pid cache list *\/$/;"	m	struct:xa_instance
pid_offset	xenaccess/xenaccess.h	/^            int pid_offset;      \/**< EPROCESS->UniqueProcessId *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
pid_offset	xenaccess/xenaccess.h	/^            int pid_offset;      \/**< task_struct->pid *\/$/;"	m	struct:xa_instance::__anon4::linux_instance
predict_ksyms	openfile-list.c	/^int predict_ksyms(char *ksyms, const char *sysmap)$/;"	f
prev	xenaccess/xenaccess.h	/^    struct xa_cache_entry *prev;$/;"	m	struct:xa_cache_entry	typeref:struct:xa_cache_entry::xa_cache_entry
prev	xenaccess/xenaccess.h	/^    struct xa_pid_cache_entry *prev;$/;"	m	struct:xa_pid_cache_entry	typeref:struct:xa_pid_cache_entry::xa_pid_cache_entry
print_dominfo	xenaccess/xa_pretty_print.c	/^void print_dominfo (xc_dominfo_t info)$/;"	f
print_hex	xenaccess/xa_pretty_print.c	/^void print_hex (unsigned char *data, int length)$/;"	f
process_attrs	offset.c	/^static int process_attrs(Dwarf_Attribute *attrp, void *arg)$/;"	f	file:
process_debug	offset.c	/^static int process_debug(Dwfl_Module *dwflmod, $/;"	f	file:
process_debug_info	offset.c	/^static int process_debug_info(Dwfl_Module *dwflmod,$/;"	f	file:
process_dwflmod	offset.c	/^static int process_dwflmod(Dwfl_Module *dwflmod,$/;"	f	file:
process_elf_request	offset.c	/^static int process_elf_request(Dwfl_Module *dwflmod, Dwarf_Request *req)$/;"	f	file:
process_request	offset.c	/^static int process_request(int fd, const char *fname, Dwarf_Request *req)$/;"	f	file:
pse	xenaccess/xenaccess.h	/^    int pse;                \/**< nonzero if PSE is enabled *\/$/;"	m	struct:xa_instance
ptba_base_nopae	xenaccess/xa_memory.c	/^uint32_t ptba_base_nopae (uint32_t pde){$/;"	f
ptba_base_pae	xenaccess/xa_memory.c	/^uint64_t ptba_base_pae (uint64_t pde){$/;"	f
pte_index	xenaccess/xa_memory.c	/^uint32_t pte_index (xa_instance_t *instance, uint32_t address){$/;"	f
pte_pfn_nopae	xenaccess/xa_memory.c	/^uint32_t pte_pfn_nopae (uint32_t pte){$/;"	f
pte_pfn_pae	xenaccess/xa_memory.c	/^uint64_t pte_pfn_pae (uint64_t pte){$/;"	f
read_2sbyte_unaligned	elfutils/memory-access.h	151;"	d
read_2sbyte_unaligned_inc	elfutils/memory-access.h	196;"	d
read_2ubyte_unaligned	elfutils/memory-access.h	147;"	d
read_2ubyte_unaligned_inc	elfutils/memory-access.h	192;"	d
read_4sbyte_unaligned	elfutils/memory-access.h	162;"	d
read_4sbyte_unaligned_inc	elfutils/memory-access.h	205;"	d
read_4ubyte_unaligned	elfutils/memory-access.h	158;"	d
read_4ubyte_unaligned_inc	elfutils/memory-access.h	201;"	d
read_4ubyte_unaligned_noncvt	elfutils/memory-access.h	156;"	d
read_8sbyte_unaligned	elfutils/memory-access.h	171;"	d
read_8sbyte_unaligned_inc	elfutils/memory-access.h	214;"	d
read_8ubyte_unaligned	elfutils/memory-access.h	167;"	d
read_8ubyte_unaligned_inc	elfutils/memory-access.h	210;"	d
req	offset.c	/^    Dwarf_Request *req;$/;"	m	struct:attrcb_args	file:
s2	elfutils/memory-access.h	/^    int16_t s2;$/;"	m	union:unaligned
s4	elfutils/memory-access.h	/^    int32_t s4;$/;"	m	union:unaligned
s8	elfutils/memory-access.h	/^    int64_t s8;$/;"	m	union:unaligned
scope_from	offset.c	/^    Dwarf_Off scope_from;$/;"	m	struct:__anon2	file:
scope_to	offset.c	/^    Dwarf_Off scope_to;     $/;"	m	struct:__anon2	file:
sibling	offset.c	/^    Dwarf_Off sibling;$/;"	m	struct:__anon2	file:
size	xenaccess/xenaccess.h	/^            uint32_t size;       \/**< total size of domain's memory *\/$/;"	m	struct:xa_instance::__anon5::xen
size	xenaccess/xenaccess.h	/^            uint32_t size;       \/**< total size of file, in bytes *\/$/;"	m	struct:xa_instance::__anon5::file
start_brk	xenaccess/xenaccess.h	/^    unsigned long start_brk;   \/**< initial address of the heap *\/$/;"	m	struct:xa_linux_taskaddr
start_code	xenaccess/xenaccess.h	/^    unsigned long start_code;  \/**< initial address of executable code *\/$/;"	m	struct:xa_linux_taskaddr
start_data	xenaccess/xenaccess.h	/^    unsigned long start_data;  \/**< initial address of initialized data *\/$/;"	m	struct:xa_linux_taskaddr
start_stack	xenaccess/xenaccess.h	/^    unsigned long start_stack; \/**< initial address of user mode stack *\/$/;"	m	struct:xa_linux_taskaddr
symbol_name	xenaccess/xenaccess.h	/^    char *symbol_name;$/;"	m	struct:xa_cache_entry
sysmap	xenaccess/config/config_parser.h	/^    char sysmap[CONFIG_STR_LENGTH];$/;"	m	struct:xa_config_entry
sysmap	xenaccess/xenaccess.h	/^    char *sysmap;           \/**< system map file for domain's running kernel *\/$/;"	m	struct:xa_instance
sysmap_assignment	xenaccess/config/grammar.y	/^sysmap_assignment:$/;"	l
sysvhash_entrysize	elfutils/libeblP.h	/^  int sysvhash_entrysize;$/;"	m	struct:ebl
tag	offset.c	/^    unsigned int tag;$/;"	m	struct:__anon2	file:
tasks	xenaccess/config/config_parser.h	/^            int tasks; $/;"	m	struct:xa_config_entry::__anon3::windows_offsets
tasks	xenaccess/config/config_parser.h	/^            int tasks;$/;"	m	struct:xa_config_entry::__anon3::linux_offsets
tasks_offset	xenaccess/xenaccess.h	/^            int tasks_offset;    \/**< EPROCESS->ActiveProcessLinks *\/$/;"	m	struct:xa_instance::__anon4::windows_instance
tasks_offset	xenaccess/xenaccess.h	/^            int tasks_offset;    \/**< task_struct->tasks *\/$/;"	m	struct:xa_instance::__anon4::linux_instance
test_ntoskrnl_base	xenaccess/windows_memory.c	/^int test_ntoskrnl_base ($/;"	f
u2	elfutils/memory-access.h	/^    uint16_t u2;$/;"	m	union:unaligned
u4	elfutils/memory-access.h	/^    uint32_t u4;$/;"	m	union:unaligned
u8	elfutils/memory-access.h	/^    uint64_t u8;$/;"	m	union:unaligned
unaligned	elfutils/memory-access.h	/^union unaligned$/;"	u
v2p_nopae	xenaccess/xa_memory.c	/^uint32_t v2p_nopae(xa_instance_t *instance, uint32_t cr3, uint32_t vaddr, int k)$/;"	f
v2p_pae	xenaccess/xa_memory.c	/^uint32_t v2p_pae (xa_instance_t *instance, uint32_t cr3, uint32_t vaddr, int k)$/;"	f
virt_address	xenaccess/xenaccess.h	/^    uint32_t virt_address;$/;"	m	struct:xa_cache_entry
win_iba_assignment	xenaccess/config/grammar.y	/^win_iba_assignment:$/;"	l
win_pdbase_assignment	xenaccess/config/grammar.y	/^win_pdbase_assignment:$/;"	l
win_peb_assignment	xenaccess/config/grammar.y	/^win_peb_assignment:$/;"	l
win_ph_assignment	xenaccess/config/grammar.y	/^win_ph_assignment:$/;"	l
win_pid_assignment	xenaccess/config/grammar.y	/^win_pid_assignment:$/;"	l
win_tasks_assignment	xenaccess/config/grammar.y	/^win_tasks_assignment:$/;"	l
windows_access_kernel_symbol	xenaccess/windows_memory.c	/^void *windows_access_kernel_symbol ($/;"	f
windows_find_eprocess	xenaccess/windows_process.c	/^uint32_t windows_find_eprocess (xa_instance_t *instance, char *name)$/;"	f
windows_get_EPROCESS	xenaccess/windows_memory.c	/^unsigned char *windows_get_EPROCESS ($/;"	f
windows_get_eprocess_name	xenaccess/windows_process.c	/^char *windows_get_eprocess_name (xa_instance_t *instance, uint32_t paddr)$/;"	f
windows_init	xenaccess/windows_core.c	/^int windows_init (xa_instance_t *instance)$/;"	f
windows_instance	xenaccess/xenaccess.h	/^        struct windows_instance{$/;"	s	union:xa_instance::__anon4
windows_instance	xenaccess/xenaccess.h	/^        } windows_instance;$/;"	m	union:xa_instance::__anon4	typeref:struct:xa_instance::__anon4::windows_instance
windows_offsets	xenaccess/config/config_parser.h	/^        struct windows_offsets {$/;"	s	union:xa_config_entry::__anon3
windows_offsets	xenaccess/config/config_parser.h	/^        } windows_offsets;$/;"	m	union:xa_config_entry::__anon3	typeref:struct:xa_config_entry::__anon3::windows_offsets
windows_pid_to_pgd	xenaccess/windows_memory.c	/^uint32_t windows_pid_to_pgd (xa_instance_t *instance, int pid)$/;"	f
windows_symbol_to_address	xenaccess/windows_symbols.c	/^int windows_symbol_to_address ($/;"	f
xa_access_kernel_sym	xenaccess/xa_memory.c	/^void *xa_access_kernel_sym ($/;"	f
xa_access_kernel_va	xenaccess/xa_memory.c	/^void *xa_access_kernel_va ($/;"	f
xa_access_kernel_va_range	xenaccess/xa_memory.c	/^void *xa_access_kernel_va_range ($/;"	f
xa_access_ma	xenaccess/xa_memory.c	/^void *xa_access_ma ($/;"	f
xa_access_pa	xenaccess/xa_memory.c	/^void *xa_access_pa ($/;"	f
xa_access_user_va	xenaccess/xa_memory.c	/^void *xa_access_user_va ($/;"	f
xa_access_user_va_range	xenaccess/xa_memory.c	/^void *xa_access_user_va_range ($/;"	f
xa_cache_entry	xenaccess/xenaccess.h	/^struct xa_cache_entry{$/;"	s
xa_cache_entry_t	xenaccess/xenaccess.h	/^typedef struct xa_cache_entry* xa_cache_entry_t;$/;"	t	typeref:struct:xa_cache_entry
xa_check_cache_sym	xenaccess/xa_cache.c	/^int xa_check_cache_sym (xa_instance_t *instance,$/;"	f
xa_check_cache_virt	xenaccess/xa_cache.c	/^int xa_check_cache_virt (xa_instance_t *instance,$/;"	f
xa_check_pid_cache	xenaccess/xa_cache.c	/^int xa_check_pid_cache (xa_instance_t *instance, int pid, uint32_t *pgd)$/;"	f
xa_check_pid_cache_helper	xenaccess/xa_cache.c	/^xa_pid_cache_entry_t xa_check_pid_cache_helper ($/;"	f
xa_config_entry	xenaccess/config/config_parser.h	/^typedef struct xa_config_entry {$/;"	s
xa_config_entry_t	xenaccess/config/config_parser.h	/^} xa_config_entry_t;$/;"	t	typeref:struct:xa_config_entry
xa_current_cr3	xenaccess/xa_memory.c	/^uint32_t xa_current_cr3 (xa_instance_t *instance, uint32_t *cr3)$/;"	f
xa_dbprint	xenaccess/xa_private.h	79;"	d
xa_dbprint	xenaccess/xa_util.c	/^void xa_dbprint(char* format, ...) {$/;"	f
xa_destroy	xenaccess/xa_core.c	/^int xa_destroy (xa_instance_t *instance)$/;"	f
xa_destroy_cache	xenaccess/xa_cache.c	/^int xa_destroy_cache (xa_instance_t *instance)$/;"	f
xa_destroy_pid_cache	xenaccess/xa_cache.c	/^int xa_destroy_pid_cache (xa_instance_t *instance)$/;"	f
xa_errprint	xenaccess/xa_error.c	/^void xa_errprint (char* format, ...){$/;"	f
xa_find_kernel_pd	xenaccess/xa_memory.c	/^uint32_t xa_find_kernel_pd (xa_instance_t *instance)$/;"	f
xa_get_bit	xenaccess/xa_util.c	/^int xa_get_bit (unsigned long reg, int bit)$/;"	f
xa_get_domain_id	xenaccess/xa_domain_info.c	/^uint32_t xa_get_domain_id (char *name)$/;"	f
xa_get_domain_id	xenaccess/xa_domain_info.c	/^uint32_t xa_get_domain_id (char *name){return 0;}$/;"	f
xa_get_kernel_name	xenaccess/xa_domain_info.c	/^char *xa_get_kernel_name (int id)$/;"	f
xa_get_kernel_name	xenaccess/xa_domain_info.c	/^char *xa_get_kernel_name (int id){return NULL;}$/;"	f
xa_get_vmpath	xenaccess/xa_domain_info.c	/^char *xa_get_vmpath (int id)$/;"	f
xa_get_vmpath	xenaccess/xa_domain_info.c	/^char *xa_get_vmpath (int id){return NULL;}$/;"	f
xa_init_common	xenaccess/xa_core.c	/^void xa_init_common (xa_instance_t *instance)$/;"	f
xa_init_file_lax	xenaccess/xa_core.c	/^int xa_init_file_lax$/;"	f
xa_init_file_private	xenaccess/xa_core.c	/^int xa_init_file_private ($/;"	f
xa_init_file_strict	xenaccess/xa_core.c	/^int xa_init_file_strict$/;"	f
xa_init_vm_id_lax	xenaccess/xa_core.c	/^int xa_init_vm_id_lax (uint32_t domain_id, xa_instance_t *instance)$/;"	f
xa_init_vm_id_strict	xenaccess/xa_core.c	/^int xa_init_vm_id_strict (uint32_t domain_id, xa_instance_t *instance)$/;"	f
xa_init_vm_name_lax	xenaccess/xa_core.c	/^int xa_init_vm_name_lax (char *domain_name, xa_instance_t *instance)$/;"	f
xa_init_vm_name_strict	xenaccess/xa_core.c	/^int xa_init_vm_name_strict (char *domain_name, xa_instance_t *instance)$/;"	f
xa_init_vm_private	xenaccess/xa_core.c	/^int xa_init_vm_private$/;"	f
xa_instance	xenaccess/xenaccess.h	/^typedef struct xa_instance{$/;"	s
xa_instance_t	xenaccess/xenaccess.h	/^} xa_instance_t;$/;"	t	typeref:struct:xa_instance
xa_ishvm	xenaccess/xa_domain_info.c	/^int xa_ishvm (int id)$/;"	f
xa_ishvm	xenaccess/xa_domain_info.c	/^int xa_ishvm (int id){return 0;}$/;"	f
xa_kernel_pd_bitcount	xenaccess/xa_memory.c	/^int xa_kernel_pd_bitcount (uint32_t n)$/;"	f
xa_kernel_pd_checksum	xenaccess/xa_memory.c	/^uint32_t xa_kernel_pd_checksum (xa_instance_t *instance, unsigned char *memory)$/;"	f
xa_kernel_pd_score	xenaccess/xa_memory.c	/^int xa_kernel_pd_score (unsigned char *memory, uint32_t length, uint32_t msize)$/;"	f
xa_kernel_pd_selfref	xenaccess/xa_memory.c	/^int xa_kernel_pd_selfref($/;"	f
xa_kernel_pd_valid_entry	xenaccess/xa_memory.c	/^int xa_kernel_pd_valid_entry (uint32_t value, uint32_t msize)$/;"	f
xa_linux_get_taskaddr	xenaccess/linux_memory.c	/^int xa_linux_get_taskaddr ($/;"	f
xa_linux_taskaddr	xenaccess/xenaccess.h	/^typedef struct xa_linux_taskaddr{$/;"	s
xa_linux_taskaddr_t	xenaccess/xenaccess.h	/^} xa_linux_taskaddr_t;$/;"	t	typeref:struct:xa_linux_taskaddr
xa_map_file_range	xenaccess/xa_file.c	/^void *xa_map_file_range (xa_instance_t *instance, int prot, unsigned long pfn)$/;"	f
xa_map_page	xenaccess/xa_util.c	/^void *xa_map_page (xa_instance_t *instance, int prot, unsigned long frame_num)$/;"	f
xa_mmap_mfn	xenaccess/xa_memory.c	/^void *xa_mmap_mfn (xa_instance_t *instance, int prot, unsigned long mfn)$/;"	f
xa_mmap_pfn	xenaccess/xa_memory.c	/^void *xa_mmap_pfn (xa_instance_t *instance, int prot, unsigned long pfn)$/;"	f
xa_pagetable_lookup	xenaccess/xa_memory.c	/^uint32_t xa_pagetable_lookup ($/;"	f
xa_pid_cache_entry	xenaccess/xenaccess.h	/^struct xa_pid_cache_entry{$/;"	s
xa_pid_cache_entry_t	xenaccess/xenaccess.h	/^typedef struct xa_pid_cache_entry* xa_pid_cache_entry_t;$/;"	t	typeref:struct:xa_pid_cache_entry
xa_pid_to_pgd	xenaccess/xa_memory.c	/^uint32_t xa_pid_to_pgd (xa_instance_t *instance, int pid)$/;"	f
xa_read_long_long_mach	xenaccess/xa_util.c	/^int xa_read_long_long_mach ($/;"	f
xa_read_long_long_phys	xenaccess/xa_util.c	/^int xa_read_long_long_phys ($/;"	f
xa_read_long_long_sym	xenaccess/xa_util.c	/^int xa_read_long_long_sym ($/;"	f
xa_read_long_long_virt	xenaccess/xa_util.c	/^int xa_read_long_long_virt ($/;"	f
xa_read_long_mach	xenaccess/xa_util.c	/^int xa_read_long_mach ($/;"	f
xa_read_long_phys	xenaccess/xa_util.c	/^int xa_read_long_phys ($/;"	f
xa_read_long_sym	xenaccess/xa_util.c	/^int xa_read_long_sym ($/;"	f
xa_read_long_virt	xenaccess/xa_util.c	/^int xa_read_long_virt ($/;"	f
xa_report_error	xenaccess/xa_error.c	/^int xa_report_error (xa_instance_t *instance, int error, int error_type){$/;"	f
xa_set_errno	xenaccess/xa_error.c	/^void xa_set_errno (int error){$/;"	f
xa_symbol_to_address	xenaccess/xa_util.c	/^int xa_symbol_to_address (xa_instance_t *instance, char *sym, uint32_t *vaddr)$/;"	f
xa_translate_kv2p	xenaccess/xa_memory.c	/^uint32_t xa_translate_kv2p(xa_instance_t *instance, uint32_t virt_address)$/;"	f
xa_update_cache	xenaccess/xa_cache.c	/^int xa_update_cache (xa_instance_t *instance,$/;"	f
xa_update_pid_cache	xenaccess/xa_cache.c	/^int xa_update_pid_cache (xa_instance_t *instance, int pid, uint32_t pgd)$/;"	f
xa_warnprint	xenaccess/xa_error.c	/^void xa_warnprint (char* format, ...){$/;"	f
xa_windows_get_peb	xenaccess/windows_memory.c	/^int xa_windows_get_peb ($/;"	f
xa_windows_peb	xenaccess/xenaccess.h	/^typedef struct xa_windows_peb{$/;"	s
xa_windows_peb_t	xenaccess/xenaccess.h	/^} xa_windows_peb_t;$/;"	t	typeref:struct:xa_windows_peb
xc_handle	xenaccess/xenaccess.h	/^            int xc_handle;       \/**< handle to xenctrl library (libxc) *\/$/;"	m	struct:xa_instance::__anon5::xen
xc_map_foreign_pages	xenaccess/xa_util.c	/^void *xc_map_foreign_pages(int xc_handle, uint32_t dom, int prot,$/;"	f
xen	xenaccess/xenaccess.h	/^        struct xen{$/;"	s	union:xa_instance::__anon5
xen	xenaccess/xenaccess.h	/^        } xen;$/;"	m	union:xa_instance::__anon5	typeref:struct:xa_instance::__anon5::xen
xen_version	xenaccess/xenaccess.h	/^            int xen_version;     \/**< version of Xen libxa is running on *\/$/;"	m	struct:xa_instance::__anon5::xen
