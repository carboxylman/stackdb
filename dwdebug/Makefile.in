PACKAGE = dwdebug
VERSION = 0.1
LIBVERSION = 0.1

SRCDIR		= @srcdir@
TOP_SRCDIR	= @top_srcdir@
SUBDIR		= dwdebug
OBJDIR		= @top_builddir@

SUBDIRS = 

include $(OBJDIR)/Makeconf

CFLAGS += -I$(TOP_SRCDIR)/target -I$(TOP_SRCDIR)/lib -I$(TOP_SRCDIR)/include \
	-I$(OBJDIR)
CFLAGS += -DDWDEBUG_USE_STRTAB
CFLAGS += $(ELFUTILS_CFLAGS) $(GLIB_CFLAGS)

LDFLAGS += $(ELFUTILS_LDFLAGS) $(GLIB_LDFLAGS)

HEADERS := $(SRCDIR)/dwdebug.h \
	$(TOP_SRCDIR)/target/target_api.h \
	$(TOP_SRCDIR)/include/list.h $(TOP_SRCDIR)/include/alist.h \
	$(TOP_SRCDIR)/include/common.h $(TOP_SRCDIR)/include/log.h \
	$(TOP_SRCDIR)/include/output.h

OBJECTS := debug.lo dwarf_debuginfo.lo dwarf_elfutils.lo 
LIBRARIES := dwdebug.a dwdebug.so.$(LIBVERSION)

STATICLIBS := $(OBJDIR)/lib/log.a dwdebug.a

PROGRAMS := dumpdebuginfo

INST_INC = dwdebug.h
INST_LIB = $(LIBRARIES)

# Get libtool to shut up when compiling.
RM=rm -f

all:	$(LIBRARIES) dwdebug.so $(PROGRAMS) all-subdirs

include $(TOP_SRCDIR)/Makerules

.c.lo:	$(HEADERS)
	$(LIBTOOL) --tag=CC --mode=compile ${CC} ${CFLAGS} -c $<

dwdebug.a:	$(HEADERS) $(OBJECTS)
	@$(LIBTOOL) --tag=CC --mode=link $(CC) -o dwdebug.a $(OBJECTS)

dwdebug.lo:	$(HEADERS) $(OBJECTS)
	@$(LIBTOOL) --tag=CC --mode=link ${CC} -shared -o $@ $(OBJECTS)

dwdebug.so.$(LIBVERSION):	dwdebug.lo
	$(CP) -f dwdebug.lo $@

dwdebug.so:	dwdebug.so.$(LIBVERSION)
	$(LN_S) $< $@

dumpdebuginfo: $(HEADERS) $(LIBRARIES) dumpdebuginfo.lo $(STATICLIBS)
	$(CC) -o $@ $(CFLAGS) $@.o $(STATICLIBS) $(LDFLAGS)

install: def-install install-subdirs
	$(SUDO) $(CP) -fd dwdebug.so $(DESTDIR)$(INSTALL_LIBDIR)/

clean: clean-subdirs
	@$(LIBTOOL) --mode=clean rm -f $(OBJECTS) \
		dwdebug.lo targetdumpval.lo dumpdebuginfo.lo
	$(RM) -f $(LIBRARIES) dwdebug.o dwdebug.so dwdebug.so.$(LIBVERSION) 
	$(RM) -f $(PROGRAMS)

distclean: distclean-subdirs

# How to recursively descend into subdirectories to make general
# targets such as `all'.
%.MAKE:
	@$(MAKE) -C $(dir $@) $(basename $(notdir $@))
%-subdirs: $(addsuffix /%.MAKE,$(SUBDIRS)) ;

.PHONY:	$(SUBDIRS)

.SECONDARY:
