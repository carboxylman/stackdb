#
# Copyright (c) 2012 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

SymtabRef = xsd:IDREF
SymbolRef = xsd:IDREF

#
# Basically, the rule is that any vmi1 elements/types you need to
# reference in WSDL *must* be expressed as named complexTypes in the
# converted RNC produced by trang.  If this does not happen, the WSDL
# produced by gsoap will reference complexTypes that do not exist.  You
# can get into this situation a few different ways via trang's
# conversion of RNC (the situation being that trang will produce lots
# of elements (that are referenced later) with anonymous complexTypes).
# gsoap doesn't like this, even when you feed it those XSDs; it
# converts those anonymous types to named complexTypes.  Then, when it
# uses those type refs in WSDL messages, they aren't valid in the trang
# XSD schemas.
#
# So you need to avoid the situations that make trang produce anonymous
# complexTypes for the the types that get used in the WSDL directly.
# For debuginfo, that basically means the following patterns:
#
# SymbolOrSymbolRef, SymbolsOrSymbolRefs, SymbolsOrSymbolRefsOpt,
# SymtabOrSymtabRef, SymtabsOrSymtabRefs, SymtabsOrSymtabRefsOpt,
# DebugFile ...
#
# You avoid this situation by 1) avoiding attribute-only elements (these
# become attributeGroups in trang XSD, and gsoap doesn't handle groups
# nearly the same way that trang does; it seems to read XSDs with
# them and convert the groups to complexType-related stuff); and 2) if
# you need to reuse an element's type in a SOAP msg, provide a pattern
# group for just the element's *contents* without the 'element {' '}'
# bits around it.  If you put the element bits in, trang will generate
# an element that is ref'd elsewhere, that has an inline anonymous
# complexType... then when gsoap tries to reference that type in the
# WSDL, it cannot be found.
#
# This situation is going to force us to eventually either 1) write both
# our own RNC and WSDL files (so that the type/element refs are the
# same); 2) describe our data structs not in XML, but in gsoap's C-like
# header format (painful, but uniform); 3) use our own XSD, but don't
# strip gsoap's version of it that it inlines in the WSDL file out.
# This means we get schema control, BUT that anybody who pulls our WSDL
# doesn't really use our XSD files!  On the other hand, they are
# available for use outside of WSDL/SOAP/gsoap.  Maybe that is enough.
#

SymbolOrSymbolRef = 
    ((element variable { VariableT } | element function { FunctionT }
      | element label { LabelT } | element voidType { VoidTypeT } 
      | element baseType { BaseTypeT } 
      | element pointerType { PointerTypeT }
      | element typedefType { TypedefTypeT } 
      | element constType { ConstTypeT }
      | element volatileType { VolatileTypeT } 
      | element arrayType { ArrayTypeT } 
      | element enumType { EnumTypeT } 
      | element structType { StructTypeT }
      | element unionType { UnionTypeT } 
      | element functionType { FunctionTypeT }) 
     | element symbolRef { SymbolRef })

SymbolsOrSymbolRefs = 
    ((element variable { VariableT } | element function { FunctionT }
      | element label { LabelT } | element voidType { VoidTypeT } 
      | element baseType { BaseTypeT } 
      | element pointerType { PointerTypeT }
      | element typedefType { TypedefTypeT } 
      | element constType { ConstTypeT }
      | element volatileType { VolatileTypeT } 
      | element arrayType { ArrayTypeT } 
      | element enumType { EnumTypeT } 
      | element structType { StructTypeT }
      | element unionType { UnionTypeT } 
      | element functionType { FunctionTypeT })+ 
     | element symbolRef { SymbolRef }+)

SymbolsOrSymbolRefsOpt = 
    ((element variable { VariableT } | element function { FunctionT }
      | element label { LabelT } | element voidType { VoidTypeT } 
      | element baseType { BaseTypeT } 
      | element pointerType { PointerTypeT }
      | element typedefType { TypedefTypeT } 
      | element constType { ConstTypeT }
      | element volatileType { VolatileTypeT } 
      | element arrayType { ArrayTypeT } 
      | element enumType { EnumTypeT } 
      | element structType { StructTypeT }
      | element unionType { UnionTypeT } 
      | element functionType { FunctionTypeT })* 
     | element symbolRef { SymbolRef }*)

NestedSymbolT = SymbolsOrSymbolRefs

NestedSymbol = element nestedSymbol { NestedSymbolT }

#
# The following two patterns cause trang to spit xs:groups instead of 
# complex types, so we can't use them with gsoap, and must inline them.
#
#SymtabOrSymtabRef = 
#    (element symtab { SymtabT } | element symtabRef { SymtabRef })
#SymtabsOrSymtabRefs = (element symtab { SymtabT }+ 
#                       | element symtabRef { SymtabRef }+)
#
# ... but this pattern causes a complex type, so it's safe!
#
SymtabsOrSymtabRefsOpt = (element symtab { SymtabT }* 
                          | element symtabRef { SymtabRef }*)

DebugFileT = 
    element filename { text },
    element name { text },
    element version { text },
    element type { "kernel" | "kmod" | "static" | "sharedlib" },

    element sourceFiles {
        element sourceFile {
            element filename { text },
	    element symtab { SymtabT }
        }*
    },

    element globalSymbols {
         SymbolsOrSymbolRefs
    }

DebugFile = element debugFile { DebugFileT }

DebugFileOptsT = 
    element symbolRefDepth { xsd:int },
    element symtabRefDepth { xsd:int },
    element doMultiRef { xsd:boolean }

DebugOpts = element debugFileOpts { DebugFileOptsT }

RangesT = 
    element range { 
        element start { ADDR },
        element end { ADDR }
    }*

Ranges = element ranges { RangesT }

SymtabT = 
    attribute sid { xsd:ID },
    attribute name { text }?,
    (element ranges { RangesT },
     element rootMeta {
         element compilationDir { text },
         element producer { text },
         element language { text }
     }?,
     element parent { SymtabT }?,
     element symtabs {
         element symtab { SymtabT }*
     },
     element symbols {
         SymbolsOrSymbolRefsOpt
     },
     element anonSymbols {
         SymbolsOrSymbolRefsOpt
     })?

Symtab = element symtab { SymtabT }

Addr = element addr { ADDR }
Reg = element reg { REGNO }
RegAddr = element regAddr { REGNO }
RegOffset = element regOffset {
    element reg { REGNO },
    element offset { OFFSET }
}
MemberOffset = element memberOffset { OFFSET }
FbRegOffset = element fbRegOffset { OFFSET }
ListLoc = element rangeLocList {
    element rangeLoc {
        attribute start { ADDR },
	attribute end { ADDR },
        element location { LocationT }
    }+
}
RuntimeLoc = element runtimeLoc { text }

LocationT =
    attribute type { "none" | "addr" | "reg" | "regAddr" | "regOffset" 
                     | "memberOffset"| "fbRegOffset" | "list" | "runtime" }, 
    ( Addr | Reg | RegAddr | RegOffset | MemberOffset | FbRegOffset 
      | ListLoc | RuntimeLoc )?

SymbolHeaderT = 
    attribute sid { xsd:ID },
    attribute name { text }?,
    element symbolMeta {
        attribute source { "dwarf" | "elf" },
        attribute external { xsd:boolean },
        attribute declaration { xsd:boolean },
        attribute prototyped { xsd:boolean }
    },
    (element size { xsd:unsignedInt }
     | (element bitSize { xsd:unsignedInt },
        element bitOffset { xsd:unsignedInt },
        element containingTypeByteSize { xsd:unsignedInt }))?

InstanceSymbolT = 
    attribute inlineInstance { xsd:boolean },
    attribute declaredInline { xsd:boolean },
    attribute inlined { xsd:boolean },

    element addr { ADDR }?,

    element type {
        SymbolOrSymbolRef
    }?,
    element constValue { text }?,
    element abstractOrigin {
        SymbolOrSymbolRef
    }?,
    element inlineInstances {
        SymbolsOrSymbolRefs
    }?

VariableT = 
    SymbolHeaderT,

    attribute param { xsd:boolean },
    attribute member { xsd:boolean },
    attribute enumval { xsd:boolean },

    InstanceSymbolT,
    element location { LocationT }?

FunctionT = 
    SymbolHeaderT,

    attribute argCount { xsd:unsignedShort },
    attribute hasUnspecifiedParams { xsd:boolean },

    InstanceSymbolT,

    element entryPC { ADDR }?,
    element prologueEnd { ADDR }?,
    element epilogueBegin { ADDR }?,

    element arguments {
        SymbolsOrSymbolRefsOpt
    },
    element ranges { RangesT },
    element symtab { SymtabT }

LabelT = 
    SymbolHeaderT,
    InstanceSymbolT

VoidTypeT =
    SymbolHeaderT

BaseTypeT = 
    SymbolHeaderT,
    element encoding { 
        "address" | "boolean" | "complexFloat" | "float" | "signed"
	| "signedChar" | "unsigned" | "unsignedChar" | "imaginaryFloat"
	| "packedDecimal" | "numericString" | "edited" | "signedFixed"
	| "unsignedFixed" | "unknown"
    }

PointerTypeT = 
    SymbolHeaderT,
    element type {
        SymbolOrSymbolRef
    }

TypedefTypeT = 
    SymbolHeaderT,
    element type {
        SymbolOrSymbolRef
    }

ConstTypeT = 
    SymbolHeaderT,
    element type {
        SymbolOrSymbolRef
    }

VolatileTypeT = 
    SymbolHeaderT,
    element type {
        SymbolOrSymbolRef
    }

ArrayTypeT = 
    SymbolHeaderT,
    attribute subrangeCount { xsd:int },
    element subranges {
        element subrange { xsd:int }+
    }

EnumTypeT = 
    SymbolHeaderT,
    attribute memberCount { xsd:int },
    element members {
        SymbolsOrSymbolRefs
    }

StructTypeT = 
    SymbolHeaderT,
    attribute memberCount { xsd:int },
    element members {
        SymbolsOrSymbolRefsOpt
    }

UnionTypeT = 
    SymbolHeaderT,
    attribute memberCount { xsd:int },
    element members {
        SymbolsOrSymbolRefsOpt
    }

FunctionTypeT = 
    SymbolHeaderT,
    attribute argCount { xsd:unsignedShort },
    attribute hasUnspecifiedParams { xsd:boolean},
    element arguments {
        SymbolsOrSymbolRefsOpt
    }

