#
# Copyright (c) 2012, 2013 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

SymtabRef = xsd:IDREF
SymbolRef = xsd:IDREF

#
# Basically, the rule is that any vmi1 elements/types you need to
# reference in WSDL *must* be expressed as named complexTypes in the
# converted RNC produced by trang.  If this does not happen, the WSDL
# produced by gsoap will reference complexTypes that do not exist.  You
# can get into this situation a few different ways via trang's
# conversion of RNC (the situation being that trang will produce lots
# of elements (that are referenced later) with anonymous complexTypes).
# gsoap doesn't like this, even when you feed it those XSDs; it
# converts those anonymous types to named complexTypes.  Then, when it
# uses those type refs in WSDL messages, they aren't valid in the trang
# XSD schemas.
#
# So you need to avoid the situations that make trang produce anonymous
# complexTypes for the the types that get used in the WSDL directly.
#
# You avoid this situation by 1) avoiding attribute-only elements (these
# become attributeGroups in trang XSD, and gsoap doesn't handle groups
# nearly the same way that trang does; it seems to read XSDs with
# them and convert the groups to complexType-related stuff); and 2) if
# you need to reuse an element's type in a SOAP msg, provide a pattern
# group for just the element's *contents* without the 'element {' '}'
# bits around it.  If you put the element bits in, trang will generate
# an element that is ref'd elsewhere, that has an inline anonymous
# complexType... then when gsoap tries to reference that type in the
# WSDL, it cannot be found.
#
# This situation is going to force us to eventually either 1) write both
# our own RNC and WSDL files (so that the type/element refs are the
# same); 2) describe our data structs not in XML, but in gsoap's C-like
# header format (painful, but uniform); 3) use our own XSD, but don't
# strip gsoap's version of it that it inlines in the WSDL file out.
# This means we get schema control, BUT that anybody who pulls our WSDL
# doesn't really use our XSD files!  On the other hand, they are
# available for use outside of WSDL/SOAP/gsoap.  Maybe that is enough.
#
# Examples: 
#
# The following two patterns cause trang to spit xs:groups instead of 
# complex types, so we can't use them with gsoap, and must inline them.
#
#SymtabOrSymtabRef = 
#    (element symtab { SymtabT } | element symtabRef { SymtabRef })
#SymtabsOrSymtabRefs = (element symtab { SymtabT }+ 
#                       | element symtabRef { SymtabRef }+)
#
# ... but this pattern causes a complex type, so it's safe!
#
#SymtabsOrSymtabRefsOpt = (element symtab { SymtabT }* 
#                          | element symtabRef { SymtabRef }*)
#

SymbolT = 
    (element variable { VariableT } | element function { FunctionT }
     | element label { LabelT } | element voidType { VoidTypeT } 
     | element baseType { BaseTypeT } 
     | element pointerType { PointerTypeT }
     | element typedefType { TypedefTypeT } 
     | element constType { ConstTypeT }
     | element volatileType { VolatileTypeT } 
     | element arrayType { ArrayTypeT } 
     | element enumType { EnumTypeT } 
     | element structType { StructTypeT }
     | element unionType { UnionTypeT } 
     | element functionType { FunctionTypeT })

SymbolsT = 
    (element variable { VariableT } | element function { FunctionT }
     | element label { LabelT } | element voidType { VoidTypeT } 
     | element baseType { BaseTypeT } 
     | element pointerType { PointerTypeT }
     | element typedefType { TypedefTypeT } 
     | element constType { ConstTypeT }
     | element volatileType { VolatileTypeT } 
     | element arrayType { ArrayTypeT } 
     | element enumType { EnumTypeT } 
     | element structType { StructTypeT }
     | element unionType { UnionTypeT } 
     | element functionType { FunctionTypeT })+

SymbolsOptT =
    (element variable { VariableT } | element function { FunctionT }
     | element label { LabelT } | element voidType { VoidTypeT }
     | element baseType { BaseTypeT }
     | element pointerType { PointerTypeT }
     | element typedefType { TypedefTypeT }
     | element constType { ConstTypeT }
     | element volatileType { VolatileTypeT }
     | element arrayType { ArrayTypeT }
     | element enumType { EnumTypeT }
     | element structType { StructTypeT }
     | element unionType { UnionTypeT }
     | element functionType { FunctionTypeT })*

#NestedSymbolT = SymbolsT

NestedSymbol = element nestedSymbol { SymbolsT }

DebugFileT = 
    (attribute sid { DebugFileIdT } | attribute sref { xsd:IDREF }),
    element name { text }?,
    (element version { xsd:token },
     element debugfileType { "none" | "kernel" | "kmod" | "executable" 
                             | "dynamic" | "relocatable" | "corefile" },

     element sourceFiles {
         element sourceFile {
             element filename { xsd:token },
             element compilationDir { xsd:token },
             element producer { xsd:token },
             element language { xsd:token },
             element symtab { SymtabT }
         }*
     },

     element globalSymbols {
          SymbolsT
     })?

DebugFile = element debugFile { DebugFileT }

DebugFileOptsT = 
    element debugfileRefDepth { xsd:int },
    element symbolRefDepth { xsd:int },
    element symtabRefDepth { xsd:int },
    element doMultiRef { xsd:boolean },
    element doManualRef { xsd:boolean }

DebugOpts = element debugFileOpts { DebugFileOptsT }

RangesT = 
    element range { 
        element start { ADDR },
        element end { ADDR }
    }*

Ranges = element ranges { RangesT }

SymtabT = 
    (attribute sid { xsd:ID } | attribute sref { xsd:IDREF }),
    attribute name { xsd:token }?,
    (element ranges { RangesT },
     element parent { SymtabT }?,
     element symtabs { element symtab { SymtabT }* },
     element symbols { SymbolsOptT },
     element anonSymbols { SymbolsOptT })?

Symtab = element symtab { SymtabT }

Addr = element addr { ADDR }
Reg = element reg { REGNO }
RegAddr = element regAddr { REGNO }
RegOffset = element regOffset {
    element reg { REGNO },
    element offset { OFFSET }
}
MemberOffset = element memberOffset { OFFSET }
FbRegOffset = element fbRegOffset { OFFSET }
ListLoc = element rangeLocList {
    element rangeLoc {
        attribute start { ADDR },
	attribute end { ADDR },
        element location { LocationT }
    }+
}
RuntimeLoc = element runtimeLoc { xsd:string }

LocationT =
    attribute locationType { "none" | "addr" | "reg" | "regAddr" | "regOffset" 
                             | "memberOffset"| "fbRegOffset" | "list"
			     | "runtime" }, 
    ( Addr | Reg | RegAddr | RegOffset | MemberOffset | FbRegOffset 
      | ListLoc | RuntimeLoc )?

SymbolHeader = 
    #
    # If this symbol is a manual ref, only sref will be set.
    # If this symbol is a fetchable ref, sref and source, and maybe
    # name, will be set.
    # Otherwise, sid and source will be set, and maybe name.
    #
    # Names are set only if they exist; some symbols are anonymous.
    #
    (attribute sid { xsd:ID } | attribute sref { xsd:IDREF }),
    attribute name { xsd:token }?

SizeT = 
    attribute sizeType { "byte" | "bit" },
    #
    # byteSize will always be set if the symbol has a size; if the size
    # is really a fraction of a byte, then bitSize, bitOffset, and
    # containingTypeByteSize will be set, and byteSize is the bitSize
    # rounded up to the nearest byte (which may not be the same as the
    # containingTypeByteSize; that value is the byte size of the integer
    # used to hold the bitfield).
    #
    element byteSize { xsd:unsignedInt },
    (element bitSize { xsd:unsignedInt },
     element bitOffset { xsd:unsignedInt },
     element containingTypeByteSize { xsd:unsignedInt })?
    

SymbolCommon = 
    element declaration {
        attribute isExternal { xsd:boolean },
        attribute isDeclaration { xsd:boolean },
        attribute isPrototyped { xsd:boolean }
    },
    element size { SizeT }?,
    element source { "dwarf" | "elf" }

InstanceSymbol = 
    element addr { ADDR }?,
    element inlineInfo {
        attribute isInlineInstance { xsd:boolean },
        attribute isDeclaredInline { xsd:boolean },
        attribute isInlined { xsd:boolean },
        element instances { SymbolsT }?,
        element origin { SymbolT }?
    }

VariableT =
    SymbolHeader,
    (SymbolCommon,
     InstanceSymbol,
     element symtype { SymbolT }?,
     element constValue { xsd:token }?,
     element kind { "variable" | "parameter" | "member" | "enumerator" },
     element location { LocationT }?)?

FunctionT = 
    SymbolHeader,
    (SymbolCommon,
     InstanceSymbol,
     element symtype { SymbolT }?,
     element constValue { xsd:token }?,
     element parameterCount { xsd:unsignedShort },
     element hasUnspecifiedParams { xsd:boolean },
     element parameters { SymbolsOptT },
     element entryPC { ADDR }?,
     element prologueEnd { ADDR }?,
     element epilogueBegin { ADDR }?,
     Ranges,
     element symtab { SymtabT })?

LabelT = 
    SymbolHeader,
    (SymbolCommon,
     InstanceSymbol)?

VoidTypeT =
    SymbolHeader,
    element source { "dwarf" | "elf" }

BaseTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element encoding { 
         "address" | "boolean" | "complexFloat" | "float" | "signed"
         | "signedChar" | "unsigned" | "unsignedChar" | "imaginaryFloat"
         | "packedDecimal" | "numericString" | "edited" | "signedFixed"
         | "unsignedFixed" | "unknown"
     })?

PointerTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT })?

TypedefTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT })?

ConstTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT })?

VolatileTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT })?

ArrayTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT },
     element subrangeCount { xsd:int },
     element subranges { element subrange { xsd:int }+ })?

EnumTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT },
     element memberCount { xsd:int },
     element members { SymbolsOptT })?

StructTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT },
     element memberCount { xsd:int },
     element members { SymbolsOptT })?

UnionTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT },
     element memberCount { xsd:int },
     element members { SymbolsOptT })?

FunctionTypeT = 
    SymbolHeader,
    (SymbolCommon,
     element symtype { SymbolT },
     element parameterCount { xsd:unsignedShort },
     element hasUnspecifiedParams { xsd:boolean},
     element parameters { SymbolsOptT })?

