
default namespace = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

SymtabRef = element symtabRef { xsd:IDREF }

ParentSymtabRef = element parentSymtabRef { xsd:IDREF }

SymbolRef = element symbolRef { xsd:IDREF }

DebugInfoFile = element debuginfoMeta {
    element filename { text } &
    element compilationDir { text } &
    element producer { text } &
    element language { text } &

    element sourceFileTab {
        element entry {
            element filename { text },
	    SymtabRef
        }*
    } &

    element globaltab {
        element entry {
            element name { text },
	    SymbolRef
        }*
    }
}

Symtab = element symtab {
    attribute id { xsd:ID },
    attribute name { text }?,
    Ranges,
    ParentSymtabRef,
    element subtabs {
        SymtabRef*
    },
    element tab {
        element entry {
            element name { text },
	    element symbolRef { xsd:IDREF }
        }*
    },
    element anontab {
	element symbolRef { xsd:IDREF }*
    }
}

Addr = element addr { attribute addr { ADDR } }
Reg = element reg { attribute reg { REG } }
RegAddr = element regAddr { attribute reg { REG } }
RegOffset = element regOffset {
    attribute reg { REG } &
    attribute offset { OFFSET }
}
MemberOffset = element memberOffset { attribute offset { OFFSET } }
FbRegOffset = element fbRegOffset { attribute offset { OFFSET } }
ListLoc = element listLoc { element rangeLoc { Range, Location }+ }
RuntimeLoc = element runtimeLoc { text }

Location = element location {
    attribute type { "none" | "addr" | "reg" | "regaddr" | "regOffset" 
                     | "memberOffset"| "fbregOffset" | "list" | "runtime" }, 
    ( Addr | Reg | RegAddr | RegOffset | MemberOffset | FbRegOffset 
      | ListLoc | RuntimeLoc )?
}

Variable = element variable {
    attribute id { xsd:ID },
    attribute name { text }?,
    attribute source { "dwarf" | "elf" },

    attribute external { xsd:boolean },
    attribute declaration { xsd:boolean },
    attribute prototyped { xsd:boolean },

    attribute param { xsd:boolean },
    attribute member { xsd:boolean },
    attribute enumval { xsd:boolean },

    attribute size { xsd:unsignedInt },
    attribute addr { ADDR },

    attribute typeRef { xsd:IDREF },

    attribute bitOffset { xsd:unsignedShort },
    attribute bitSize { xsd:unsignedShort },
    attribute constValue { text }?,

    attribute inlineInstance { xsd:boolean },
    attribute declaredInline { xsd:boolean },
    attribute inlined { xsd:boolean },

    element abstractOriginRef { xsd:IDREF }?,
    element inlineInstances { SymbolRef* }?,

    Location
}

Function = element function {
    attribute id { xsd:ID } &
    attribute name { text }? &
    attribute source { "dwarf" | "elf" } &

    attribute external { xsd:boolean } &
    attribute declaration { xsd:boolean } &
    attribute prototyped { xsd:boolean } &

    attribute param { xsd:boolean } &
    attribute member { xsd:boolean } &
    attribute enumval { xsd:boolean } &

    attribute size { xsd:unsignedInt } &
    attribute addr { ADDR } &

    attribute typeRef { xsd:IDREF } &

    attribute inlineInstance { xsd:boolean } &
    attribute declaredInline { xsd:boolean } &
    attribute inlined { xsd:boolean } &

    attribute argCount { xsd:unsignedShort } &
    attribute hasUnspecifiedParams { xsd:boolean } &
    attribute entryPC { ADDR } &
    attribute prologueEnd { ADDR } &
    attribute epilogueBegin { ADDR } &
    attribute constValue { text }? &

    (element abstractOriginRef { xsd:IDREF }?,
     element inlineInstances { SymbolRef* }?,

     element arguments { SymbolRef* },
     Ranges,
     SymtabRef)
}

Label = element label {
    attribute id { xsd:ID } &
    attribute name { text }? &
    attribute source { "dwarf" | "elf" } &

    attribute external { xsd:boolean } &
    attribute declaration { xsd:boolean } &
    attribute prototyped { xsd:boolean } &

    attribute param { xsd:boolean } &
    attribute member { xsd:boolean } &
    attribute enumval { xsd:boolean } &
    attribute inlineInstance { xsd:boolean } &

    attribute size { xsd:unsignedInt } &
    attribute addr { ADDR } &

    attribute typeRef { xsd:IDREF } &

    attribute declaredInline { xsd:boolean } &
    attribute inlined { xsd:boolean } &

    element abstractOriginRef { xsd:IDREF }? &
    element inlineInstances { SymbolRef* }?
}

TypeContents = 
    attribute id { xsd:ID } &
    attribute name { text }? &
    attribute source { "dwarf" | "elf" } &

    attribute external { xsd:boolean } &
    attribute declaration { xsd:boolean } &
    attribute prototyped { xsd:boolean }

VoidType = element voidType { empty }

BaseType = element baseType {
    TypeContents &
    attribute bitSize { xsd:unsignedShort }? &
    attribute encoding { 
        "address" | "boolean" | "complexFloat" | "float" | "signed"
	| "signedChar" | "unsigned" | "unsignedChar" | "imaginaryFloat"
	| "packedDecimal" | "numericString" | "edited" | "signedFixed"
	| "unsignedFixed"
    }
}

PointerType = element pointerType {
    TypeContents &
    attribute typeRef { xsd:IDREF }
}

TypedefType = element typedefType {
    TypeContents &
    attribute typeRef { xsd:IDREF }
}

ConstType = element constType {
    TypeContents &
    attribute typeRef { xsd:IDREF }
}

VolatileType = element volatileType {
    TypeContents &
    attribute typeRef { xsd:IDREF }
}

ArrayType = element arrayType {
    TypeContents &
    attribute subrangeCount { xsd:int } &
    element subranges {
        element subrange { xsd:int }+
    }
}

EnumType = element enumType {
    TypeContents &
    attribute memberCount { xsd:int } &
    element members { SymbolRef+ }
}

StructType = element structType {
    TypeContents &
    attribute memberCount { xsd:int } &
    element members { SymbolRef+ }
}

UnionType = element unionType {
    TypeContents &
    attribute memberCount { xsd:int } &
    element members { SymbolRef+ }
}

FunctionType = element functionType {
    TypeContents &
    attribute argCount { xsd:unsignedShort } &
    attribute hasUnspecifiedParams { xsd:boolean} &
    element arguments { SymbolRef* }
}


TypeChoice = 
    VoidType | BaseType | PointerType | TypedefType | ConstType 
    | VolatileType | ArrayType | EnumType | StructType | UnionType 
    | FunctionType

SymbolChoice = 
    Variable | Function | Label | VoidType | BaseType | PointerType 
        | TypedefType | ConstType | VolatileType | ArrayType | EnumType 
	| StructType | UnionType | FunctionType

Type = element type {
    VoidType | BaseType | PointerType | TypedefType | ConstType 
    | VolatileType | ArrayType | EnumType | StructType | UnionType 
    | FunctionType
}

Symbol = element symbol {
    Variable | Function | Label | VoidType | BaseType | PointerType 
        | TypedefType | ConstType | VolatileType | ArrayType | EnumType 
	| StructType | UnionType | FunctionType
}
