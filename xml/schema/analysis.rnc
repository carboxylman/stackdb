#
# Copyright (c) 2012 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

#start = Analysis

DataTypeT = 
    "none" | "bool" | "byte" | "short" | "int" | "long"
    | "ubyte" | "ushort" | "uint" | "ulong" | "float" | "double" | "string"
    | "time" | "date" | "datetime"

ParamT = 
    (element name { text } | element longName { text }),
    element description { text },
    element defaultValue { text }?
Param = element param { ParamT }

ParamValueT = 
    (element name { text } | element longName { text }),
    element value { text }
ParamValue = element paramValue { ParamValueT }

NameValueT = 
    element name { text },
    element value { text }
NameValue = element NameValue { NameValueT }

TypedNameValueT = 
    element name { text },
    element value { text },
    element type { DataTypeT }
TypedNameValue = element typedNameValue { TypedNameValueT }

AnalysisConfigT = 
    element logStdout { xsd:boolean },
    element logStderr { xsd:boolean },
    element reportStdout { xsd:boolean },
    element reportStderr { xsd:boolean },

    element inputParams { NameValue* }
AnalysisConfig = element analysisConfig { AnalysisConfigT }

AnalysisT = 
    attribute id { AnalysisIdT },
    attribute name { text },

    element description { text },
    element author { text },
    element authorContactEmail { text },

    element requiresWrite { xsd:boolean },
    element requiresControl { xsd:boolean },
    element reportsAnnotations { xsd:boolean },
    element reportsEvents { xsd:boolean },
    element reportsIntermediateResults { xsd:boolean },
    element reportsFinalResults { xsd:boolean },

    element supportsExternalControlProtocol { xsd:boolean },

    element autoparseSimpleResults { xsd:boolean },

    element annotations {
        (element annotationTypeId { xsd:ID }
         | AnnotationType)*
    },

    element inputParams { Param* },
    element outputParams { Param* }
Analysis = element analysis { AnalysisT }

AnalysisStatusT = "running" | "paused" | "done"
AnalysisStatus = element analysisStatus { AnalysisStatusT }

AnalysisInstanceT = 
    attribute id { AnalysisInstanceIdT },
    #
    # Only library-based analyses (either binary shared libs, or Python
    # higher-level libs, eventually) have targetIds.  Standalone
    # analyses do not have targetIds because the analysis server does
    # not launch a target for them.

    #
    element targetId { TargetIdT }?,
    AnalysisStatus

AnalysisInstance = element analysisInstance { AnalysisInstanceT }

AnnotationTypeT = 
    attribute id { xsd:ID },
    attribute name { text },

    element annotationField {
        attribute name { text },
	attribute type { DataTypeT }
    }+
AnnotationType = element annotationType { AnnotationTypeT }

AnnotationHeaderT = 
    attribute annotationTypeId { xsd:ID },

    attribute isEvent { xsd:boolean },
    attribute isMarker { xsd:boolean },
    attribute isDiscovery { xsd:boolean },

    attribute ns { xsd:unsignedLong },
    attribute tsc { xsd:unsignedLong },
    attribute counter { xsd:unsignedLong }

AnnotationT = 
    AnnotationHeaderT,
    element fieldValues { TypedNameValue+ }
Annotation = element annotation { AnnotationT }

#
# Analyses can report SimpleResults, TypedResults, or CustomResults.
#
# SimpleResults are named sets of text key/value pairs (and 
# have an overall text value, and an overall text msg summary).  The
# name of a SimpleResult is not a unique identifier; applications that
# use SimpleResults must be prepared to deal with this situation.
#
# TypedResults are similar to annotations.  They have an arbitrary
# number of named, typed fields (standard VMI datatypes), and also a
# name, value, and msg.  However, unlike a SimpleResult:name field, the
# TypedResult:name field should be unique.
#
# CustomResults have a unique name
#
SimpleResultT = 
    element name { text },
    element value { text },
    element msg { text },
    element outputValues { NameValue* }
SimpleResult = element simpleResult { SimpleResultT }

TypedResultT = 
    element name { text },
    element value { text },
    element msg { text },
    element outputValues { TypedNameValue* }
TypedResult = element typedResult { TypedResultT }

CustomResultT = 
    attribute id { xsd:ID },
    attribute name { text },
    AnyExtension
CustomResult = element customResult { CustomResultT }

AnalysisResultT = 
    SimpleResult | TypedResult | CustomResult

AnalysisResult = element analysisResult { AnalysisResultT }
