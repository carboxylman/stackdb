#
# Copyright (c) 2012, 2013 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

#start = Analysis

#
# This is basically the subset of XSD types we support internally.
#
DataTypeT =
    "none" | "string" | "boolean" | "float" | "double" 
    | "byte" | "short" | "int" | "long"
    | "unsignedByte" | "unsignedShort" | "unsignedInt" | "unsignedLong" 
    | "time" | "date" | "dateTime"

ParamT = 
    attribute isCommandLine { xsd:boolean }?,
    element name { text },
    element longName { text }?,
    element description { text }?,
    element defaultValue { text }?
Param = element param { ParamT }

NameValueT = 
    element nvName { text },
    element nvValue { text }
NameValue = element nameValue { NameValueT }

AnalysisEventT = 
    element analysisEventType { "paused" | "resumed" | "opened" | "closed" 
       	    		        | "finalized" },
    element analysisId { AnalysisIdT }
AnalysisEvent = element analysisEvent { AnalysisEventT }

AnalysisSpecT = 
    element name { text },

    element stdinBytes { xsd:hexBinary }?,

    element logStdout { xsd:boolean },
    element logStderr { xsd:boolean },
    element reportStdoutIntermediateResults { xsd:boolean },
    element reportStderrIntermediateResults { xsd:boolean },

    element autoparseSimpleResults { xsd:boolean },

    element inputParams { NameValue* }
AnalysisSpec = element analysisSpec { AnalysisSpecT }

AnalysisDescT = 
    attribute name { text },

    element description { text }?,
    element author { text }?,
    element authorContact { text }?,

    element binary { xsd:string },

    element requiresWrite { xsd:boolean },
    element requiresControl { xsd:boolean },
    element generatesAnnotations { xsd:boolean },
    element reportsIntermediateResults { xsd:boolean },
    element reportsFinalResults { xsd:boolean },

    element supportsExternalControl { xsd:boolean },
    element supportsAutoparseSimpleResults { xsd:boolean },

#    element annotations {
#        (element annotationTypeId { xsd:ID }
#         | AnnotationType)*
#    },

    element inParams { Param* },
    element outParams { Param* }
AnalysisDesc = element analysisDesc { AnalysisDescT }

AnalysisStatusT = "unknown" | "running" | "paused" | "error" | "done"
AnalysisStatus = element analysisStatus { AnalysisStatusT }

AnalysisT = 
    element aid { AnalysisIdT },
    
    #
    # Only library-based analyses (either binary shared libs, or Python
    # higher-level libs, eventually) have targetIds.  Standalone
    # analyses do not have targetIds because the analysis server does
    # not launch a target for them.

    #
    element tid { TargetIdT },
    AnalysisStatus,
    AnalysisResults

Analysis = element analysis { AnalysisT }

#
# Analyses can report SimpleResults, TypedResults, or CustomResults.
#
# SimpleResults are named sets of text key/value pairs (and 
# have an overall text value, and an overall text msg summary).  The
# name of a SimpleResult is not a unique identifier; applications that
# use SimpleResults must be prepared to deal with this situation.
#
# TypedResults are similar to annotations.  They have an arbitrary
# number of named, typed fields (standard VMI datatypes), and also a
# name, value, and msg.  However, unlike a SimpleResult:name field, the
# TypedResult:name field should be unique.
#
# CustomResults have a unique name
#
SimpleResultT = 
    attribute id { xsd:int },
    element name { text },
    element type { xsd:int }?,
    element time { xsd:unsignedLong },
    element tsc { xsd:unsignedLong },
    element counter { xsd:unsignedLong },
    element resultValue { text },
    element msg { text }?,
    element outputValues { NameValue* }
SimpleResult = element simpleResult { SimpleResultT }

#
# Right now, don't do typed results; we would want to use
# XSD anySimpleType basically, but Axis doesn't support that easily.
#
#TypedNameValueT = 
#    element name { text },
#    element value { text },
#    element type { DataTypeT }
#TypedNameValue = element typedNameValue { TypedNameValueT }
#
#TypedResultT = 
#    element name { text },
#    element type { text }?,
#    element subtype { text }?,
#    element value { text },
#    element msg { text }?,
#    element outputValues { TypedNameValue* }
#TypedResult = element typedResult { TypedResultT }

CustomResultT = 
    attribute id { xsd:int },
    element name { text },
    element time { xsd:unsignedLong },
    element tsc { xsd:unsignedLong },
    element counter { xsd:unsignedLong },
    element resultValue { text },
    element msg { text }?,
    AnyExtension
CustomResult = element customResult { CustomResultT }

AnalysisResultT = #SimpleResult | CustomResult
    (element simpleResult { SimpleResultT }
     | element customResult { CustomResultT })
AnalysisResult = element analysisResult { AnalysisResultT }

AnalysisResultsT = AnalysisResult*
AnalysisResults = element analysisResults { AnalysisResultsT }

#
# We don't do anything with Annotations right now, but this is the
# definition we expect to export, once we have Traces.
#
#AnnotationTypeT = 
#    attribute id { xsd:ID },
#    attribute name { text },
#
#    element annotationField {
#        attribute name { text },
#	attribute datatype { DataTypeT }
#    }+
#AnnotationType = element annotationType { AnnotationTypeT }
#
#AnnotationHeaderT = 
#    attribute annotationTypeId { xsd:ID },
#
#    attribute isEvent { xsd:boolean },
#    attribute isMarker { xsd:boolean },
#    attribute isDiscovery { xsd:boolean },
#
#    attribute ns { xsd:unsignedLong },
#    attribute tsc { xsd:unsignedLong },
#    attribute counter { xsd:unsignedLong }
#
#AnnotationT = 
#    AnnotationHeaderT,
#    element fieldValues { TypedNameValue+ }
#Annotation = element annotation { AnnotationT }
