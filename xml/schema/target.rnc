#
# Copyright (c) 2011, 2012, 2013, 2014, 2015 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

TargetTypeT = "none" | "ptrace" | "xen" | "gdb" | "osProcess" | "php"
TargetModeT = "none" | "live" | "replay" | "record"
ThreadBPModeT = "strict" | "semiStrict" | "loose"

TargetSpecT = 
    attribute type { TargetTypeT },

    element targetId { TargetIdT }?,
    element mode { TargetModeT },
    element threadBPMode { ThreadBPModeT },
    element startPaused { xsd:boolean },
    element stayPaused { xsd:boolean },
    element defaultProbeStyle { ProbepointStyleT }?,
    element dedicatedMonitor { xsd:boolean }?,
    element stdinBytes { xsd:hexBinary }?,
    element logStdout { xsd:boolean }?,
    element logStderr { xsd:boolean }?,
    element killOnClose { xsd:boolean }?,
    element killOnCloseSignal { xsd:int }?,
    element debugfileRootPrefix { xsd:token }?,
    element activeProbeThreadEntry { xsd:boolean }?,
    element activeProbeThreadExit { xsd:boolean }?,
    element activeProbeMemory { xsd:boolean }?,
    element activeProbeOther { xsd:boolean }?,

    element backendSpec {
        (TargetXenSpec | TargetPtraceSpec | TargetGdbSpec
	 | TargetOsProcessSpec | TargetPhpSpec)
    }

TargetSpec = element targetSpec { TargetSpecT }

TargetXenSpecT = 
    (element domain { text }
    | (element configFile { text },
       element replayLogFile { text }?)),
    element kernelFilename { text }?,
    element noHVMSetContext { xsd:boolean }?,
    element noClearHWDbgReg { xsd:boolean }?,
    element noUseMultiplexer { xsd:boolean }?,
    element clearMemCachesEachException { xsd:boolean }?,
    element memcacheMmapSize { xsd:unsignedInt }?,
    element useXenAccess { xsd:boolean }?,
    element useLibVMI { xsd:boolean }?,
    element dominfoTimeout { xsd:int }?

TargetXenSpec = element targetXenSpec { TargetXenSpecT }

TargetGdbSpecT = 
    ((element gdbHostname { text }?,
      element gdbPort { xsd:int }?)
     | element gdbSockfile { text }?),
    element doUdp { xsd:boolean }?,
    element isQemu { xsd:boolean }?,
    element isKvm { xsd:boolean }?,
    element qemuQmpHostname { text }?,
    element qemuQmpPort { xsd:int }?,
    element qemuMemPath { text }?,
    element mainFilename { text }?,
    element clearMemCachesEachException { xsd:boolean }?,
    element memcacheMmapSize { xsd:unsignedInt }?

TargetGdbSpec = element targetGdbSpec { TargetGdbSpecT }

TargetPtraceSpecT = 
    (element pid { xsd:int }
    | (element program { text },
       element arguments {
           element argument { xsd:hexBinary }*
       },
       element environment {
           element envvar { xsd:string }*
       }))

TargetPtraceSpec = element targetPtraceSpec { TargetPtraceSpecT }

TargetOsProcessSpecT = empty

TargetOsProcessSpec = element targetOsProcessSpec { TargetOsProcessSpecT }

TargetPhpSpecT = empty

TargetPhpSpec = element targetPhpSpec { TargetPhpSpecT }

ThreadStatusT = 
    "unknown" | "running" | "stopped" | "sleeping" | "zombie" | "dead" 
    | "blockedio" | "paging" | "paused"
ThreadStatus = element threadStatus { ThreadStatusT }

ThreadT = 
    attribute name { text },
    attribute canOverlay { xsd:boolean },	
    element thid { ThreadIdT },
    element tid { TargetIdT },
    ThreadStatus
Thread = element thread { ThreadT }

TargetStatusT = 
    "unknown" | "running" | "paused" | "dead" | "stopped" | "error" | "done"
TargetStatus = element targetStatus { TargetStatusT }

TargetT = 
    attribute name { text },
    element tid { TargetIdT },
    element activeProbeThreadEntry { xsd:boolean }?,
    element activeProbeThreadExit { xsd:boolean }?,
    element activeProbeMemory { xsd:boolean }?,
    element activeProbeOther { xsd:boolean }?,
    TargetSpec,
    TargetStatus,
    Thread*,
    AddrSpace*
Target = element target { TargetT }

TargetEventT = 
    element targetEventType { "exiting" | "exited" | "error" 
    	    		      | "osThreadCreated" | "osThreadExiting" | "osThreadExited" 
			      | "osSpaceNew" | "osSpaceMod" | "osSpaceDel"
			      | "osRegionNew" | "osRegionMod" | "osRegionDel"
			      | "osRangeNew" | "osRangeMod" | "osRangeDel"
    	    		      | "osProcessThreadCreated" | "osProcessThreadExiting" | "osProcessThreadExited" 
			      | "osProcessSpaceNew" | "osProcessSpaceMod" | "osProcessSpaceDel"
			      | "osProcessRegionNew" | "osProcessRegionMod" | "osProcessRegionDel"
			      | "osProcessRangeNew" | "osProcessRangeMod" | "osProcessRangeDel"
    	    		      | "processThreadCreated" | "processThreadExiting" | "processThreadExited" 
			      | "processSpaceNew" | "processSpaceMod" | "processSpaceDel"
			      | "processRegionNew" | "processRegionMod" | "processRegionDel"
			      | "processRangeNew" | "processRangeMod" | "processRangeDel" },


    element tid { TargetIdT },
    element thid { ThreadIdT },
    TargetStatus,
    element eventMsg { text }?
TargetEvent = element targetEvent { TargetEventT }

AddrSpaceT = 
    attribute name { text },
    attribute id { xsd:int },
    element tid { TargetIdT },
    MemRegion+
AddrSpace = element addrSpace { AddrSpaceT }

MemRegionTypeT = 
    "unknown" | "heap" | "stack" | "vdso" | "vsyscall" | "anon" | "main" | "lib"
MemRegionType = element memRegionType { MemRegionTypeT }

MemRegionT = 
    attribute name { text },
    element baseLoadAddr { ADDR },
    element basePhysAddr { ADDR },
    element baseVirtAddr { ADDR },
    element physOffset   { OFFSET },
    MemRegionType,
    MemRange+,
    element debugFileId { DebugFileIdT }+
MemRegion = element memRegion { MemRegionT }

MemRangeT =
    attribute read { xsd:boolean },
    attribute write { xsd:boolean },
    attribute execute { xsd:boolean },
    element start { ADDR },
    element end { ADDR },
    element offset { ADDR }
MemRange = element memRange { MemRangeT }

##
## Probe stuff.
##
ProbeIdT = xsd:int
ProbepointTypeT = "break" | "watch"
ProbepointType = element probepointType { ProbepointTypeT }

ProbepointStyleT = "fastest" | "hw" | "sw"
ProbepointStyle = element probepointStyle { ProbepointStyleT }

ProbepointWhenceT = "auto" | "exec" | "write" | "readwrite"
ProbepointWhence = element probepointWhence { ProbepointWhenceT }

ProbepointSizeT = "auto" | "0" | "2" | "4" | "8"
ProbepointSize = element probepointSize { ProbepointSizeT }

ProbeT = 
    element pid { ProbeIdT },
    element name { xsd:string },
    element addr { ADDR },
    element type { ProbepointTypeT },
    element style { ProbepointStyleT },
    element whence { ProbepointWhenceT },
    element psize { ProbepointSizeT },

    element tid { TargetIdT },
    element thid { ThreadIdT }
Probe = element probe { ProbeT }

RegisterValueT = 
    element name { xsd:token },
    element value { xsd:unsignedLong }
RegisterValue = element registerValue { RegisterValueT }

ProbeEventT = 
    element probeEventType { "pre" | "post" },
    element probe { ProbeT },
    element thread { ThreadT },
    element registerValues {
        element registerValue { RegisterValueT }*
    }
ProbeEvent = element probeEvent { ProbeEventT }

##
## Action stuff (including single step stuff).
##
ActionIdT = xsd:int
ActionTypeT = "return" | "regmod" | "memmod" | "singlestep"
ActionType = element actionType { ActionTypeT }
HandlerMsgT = "success" | "failure" | "stepping" | "stepping_at_bp"
HandlerMsg = element handlerMsg { HandlerMsgT }
ActionWhenceT = "oneshot" | "repeatpre" | "repeatpost"
ActionWhence = element actionWhence { ActionWhenceT }

ActionSpecT = 
    element tid { TargetIdT },
    element pid { ProbeIdT },
    element type { ActionTypeT },
    element whence { ActionWhenceT },
    (element return { element code { xsd:unsignedLong } }
     | element regmod { RegisterValue }
     | element memmod { element addr { ADDR },
       	       	      	element data { xsd:hexBinary } }
     | element singlestep { element stepCount { xsd:int } })
ActionSpec = element actionSpec { ActionSpecT }
ActionSpecsT = ActionSpec*
ActionSpecs = element actionSpecs { ActionSpecsT }

ActionT = 
    element actionId { ActionIdT },
    ActionSpec
Action = element action { ActionT }

ActionEventT = 
    HandlerMsg,
    element actionDetail { element stepCount { xsd:int }? },
    element action { ActionT },
    element thread { ThreadT },
    element registerValues {
        element registerValue { RegisterValueT }*
    }
ActionEvent = element actionEvent { ActionEventT }    
