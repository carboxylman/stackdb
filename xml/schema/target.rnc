#
# Copyright (c) 2011, 2012 The University of Utah
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

default namespace vmi1 = "http://anathema.flux.utah.edu/schema/vmi/1"

include "common.rnc"

TargetTypeT = "ptrace" | "xen"

TargetSpecT = 
    attribute type { TargetTypeT },

    element mode { "live" | "replay" | "record" },
    element threadBPMode { "strict" | "semiStrict" | "loose" },
    element startPaused { xsd:boolean },
    element logDir { text }?,
    element logFilePrefix { text }?,

    element backendSpec {
        (TargetXenSpec | TargetPtraceSpec)
    }

TargetSpec = element targetSpec { TargetSpecT }

TargetXenSpecT = 
    (element domain { text })
    | (element configFile { text },
       element replayLogFile { text }?)

TargetXenSpec = element targetXenSpec { TargetXenSpecT }

TargetPtraceSpecT = 
    (element pid { xsd:int })
    | (element program { text },
       element arguments {
           element argument { xsd:string }*
       },
       element environment {
           element envVar { 
               attribute var { text },
               attribute value { text }
           }*
       },
       element logStdout { xsd:boolean }?,
       element logStderr { xsd:boolean }?,
       element closeStdin { xsd:boolean }?)

TargetPtraceSpec = element targetPtraceSpec { TargetPtraceSpecT }

TargetThreadStatusT = 
    "unknown" | "running" | "stopped" | "sleeping" | "zombie" | "dead" 
    | "blockedio" | "paging" | "paused"
TargetThreadStatus = element threadStatus { TargetThreadStatusT }

ThreadT = 
    attribute thid { ThreadIdT },
    attribute tid { TargetIdT },
    TargetThreadStatus
Thread = element thread { ThreadT }

TargetStatusT = 
    "unknown" | "running" | "paused" | "dead" | "stopped" | "error" | "done"
TargetStatus = element targetStatus { TargetStatusT }

TargetT = 
    attribute name { text },
    attribute tid { TargetIdT },
    attribute type { TargetTypeT },
    attribute live { xsd:boolean },
    attribute writeable { xsd:boolean },
    TargetStatus,
    Thread*,
    AddrSpace+
Target = element target { TargetT }

AddrSpaceT = 
    attribute name { text },
    attribute targetId { TargetIdT },
    MemRegion+
AddrSpace = element addrSpace { AddrSpaceT }

MemRegionTypeT = 
    "heap" | "stack" | "vdso" | "vsyscall" | "anon" | "main" | "lib"
MemRegionType = element memRegionType { MemRegionTypeT }

MemRegionT = 
    attribute name { text },
    element baseLoadAddr { ADDR },
    element basePhysAddr { ADDR },
    element baseVirtAddr { ADDR },
    element physOffset   { OFFSET },
    MemRegionType,
    MemRange+,
    element debugFileId { DebugFileIdT }?
MemRegion = element memRegion { MemRegionT }

MemRangeT =
    attribute read { xsd:boolean },
    attribute write { xsd:boolean },
    attribute execute { xsd:boolean },
    element start { ADDR },
    element end { ADDR },
    element offset { ADDR }
MemRange = element memRange { MemRangeT }
    
