#!/usr/bin/env python
##
## Copyright (c) 2012, 2013 The University of Utah
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of
## the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
##

import logging
import sys
import os
import os.path
from suds.client import Client
from pysimplesoap.server import SoapDispatcher,SOAPHandler
from BaseHTTPServer import HTTPServer

logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)
logging.getLogger('suds.transport').setLevel(logging.DEBUG)
logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG)
logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)

logging.getLogger('pysimplesoap').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.server').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.simplexml').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.transport').setLevel(logging.DEBUG)

objdir = os.path.abspath("@top_builddir@")
url = 'file://%s/xml/service/target.wsdl.test' % (objdir,)
clienturl = 'file://%s/xml/service/targetListener.wsdl.test' % (objdir,)

#
# Setup SOAP listener interface
#
events = []

probeEventArgs = dict({
    'probeEvent' : {
        'probeEventType' : str,
        'probe' : { 'pid' : int,'name' : str,'addr' : int,'type' : str,
                    'style' : str,'whence' : str,'psize' : str,
                    'tid' : int,'thid' : int, },
        'thread' : { 'tid' : int,'thid' : int,'threadStatus' : str, },
        'registerValues' : [ { 'registerValue' : { 'name' : str,'value' : str, } } ]
    }
})

probeEventReturns = dict({
    'vmi1:result' : int,
    'vmi1:actionSpecs' : [ { 'vmi1:actionSpec' : {
        'vmi1:tid' : int,'vmi1:pid' : int,'vmi1:type' : str,'vmi1:whence' : str,
        'vmi1:singlestep' : { 'vmi1:stepCount' : int } 
    }, } ],
})
def probeEvent(probeEvent,request=None):
    "Handle a ProbeEvent"
    events.append(probeEvent)
    print "ProbeEvent: %s\n" % (str(probeEvent),)
    #print "ProbeEvent (raw): %s" % (str(request),)
    pid = probeEvent['probe']['pid']
    tid = probeEvent['probe']['tid']
    name = probeEvent['probe']['name']
    addr = int(probeEvent['probe']['addr'])
    pet = probeEvent['probeEventType']
    rip = 0
    for rv in probeEvent['registerValues']:
        if rv['registerValue']['name'] == 'rip':
            rip = int(rv['registerValue']['value'])
            break
        pass
    print "ProbeEvent(%s 0x%08x): rip 0x%08x, %s" % (name,addr,rip,pet)
    if probeEvent.has_key('probeEventType') and probeEvent['probeEventType'] == 'pre':
        return { 'vmi1:result' : 0,
                 'vmi1:actionSpecs' : [
                     { 'vmi1:actionSpec' : {
                         'vmi1:tid' : tid,'vmi1:pid' : pid,'vmi1:type':'singlestep',
                         'vmi1:whence' : 'oneshot','vmi1:singlestep' : { 'vmi1:stepCount' : 5 }
                         } }
                     ]
                 }
    else:
        return { 'vmi1:result' : 0,
                 'vmi1:actionSpecs' : [ ] }
    pass
actionEventArgs = dict({
    'actionEvent' : {
        'handlerMsg' : str,
        'actionDetail' : { 'stepCount' : int },
        'action' : { 'aid' : int,
                     'actionSpec' : { 'tid' : int,'pid' : int,'type' : str,
                                      'whence' : str,
                                      'return' : { 'code' : int },
                                      'regmod' : { 'registerValue' : { 'name' : str,'value' : str, } },
                                      'memmod' : { 'addr' : int,'data' : str },
                                      'singlestep' : { 'stepCount' : int }
                                      },
                     },
        'thread' : { 'tid' : int,'thid' : int,'threadStatus' : str, },
        'registerValues' : [ { 'registerValue' : { 'name' : str,'value' : str, } } ]
    }
})
def actionEvent(actionEvent):
    "Handle a ActionEvent"
    events.append(actionEvent)
    print "ActionEvent: %s\n" % (str(actionEvent),)
    aid = actionEvent['action']['aid']
    pid = actionEvent['action']['actionSpec']['pid']
    atype = actionEvent['action']['actionSpec']['type']
    msg = actionEvent['handlerMsg']
    rip = 0
    for rv in actionEvent['registerValues']:
        if rv['registerValue']['name'] == 'rip':
            rip = int(rv['registerValue']['value'])
            break
        pass
    print "ActionEvent(%d,%d,%s): rip 0x%08x, %s" % (aid,pid,atype,rip,msg)
    return { 'result' : 0 }

_namespaces = {
    'SOAP-ENV' : "http://www.w3.org/2003/05/soap-envelope",
    'SOAP-ENC' : "http://www.w3.org/2003/05/soap-encoding",
    'xsi' : "http://www.w3.org/2001/XMLSchema-instance",
    'xsd' : "http://www.w3.org/2001/XMLSchema",
}
dispatcher = SoapDispatcher(
    'targetListener',
    location = "http://localhost/",
    action = 'http://localhost/', # SOAPAction
    namespace = 'http://anathema.flux.utah.edu/schema/vmi/1', prefix="vmi1",
    debug = True,
    trace = True,
    ns = True,
    namespaces=_namespaces)

dispatcher.register_function('ProbeEvent',probeEvent,
                             returns=probeEventReturns,
                             args=probeEventArgs)
dispatcher.register_function('ActionEvent',actionEvent,
                             returns={ 'result' : int }, 
                             args=actionEventArgs)
httpd = HTTPServer(("",0), SOAPHandler)
httpd.dispatcher = dispatcher
print "Starting server (%s:%d)..." % (httpd.server_name,httpd.server_port)

#
# Setup SOAP client
#
client = Client(url,cache=None)

#
# Start running commands
#
ttypes = client.service.ListTargetTypes()

tspec = client.factory.create('TargetSpecT')
tspec._type = "xen"
tspec.mode = "live"
tspec.startPaused = True
tspec.backendSpec.targetXenSpec = client.factory.create('TargetXenSpecT')
tspec.backendSpec.targetXenSpec.domain = sys.argv[1]

target = client.service.InstantiateTarget(tspec)
client.service.PauseTarget(target.tid)
client.service.ResumeTarget(target.tid)

client.service.RegisterTargetListener(target.tid,httpd.server_name,
                                      httpd.server_port,False)

probe = client.service.ProbeSymbolSimple(target.tid,-1,"foo",sys.argv[2])

httpd.serve_forever()
