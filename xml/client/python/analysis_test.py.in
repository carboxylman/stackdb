#!/usr/bin/env python
##
## Copyright (c) 2013 The University of Utah
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of
## the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
##

import logging
import sys
import os
import os.path
from suds.client import Client
from pysimplesoap.server import SoapDispatcher,SOAPHandler
from BaseHTTPServer import HTTPServer
import binascii

logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)
logging.getLogger('suds.transport').setLevel(logging.DEBUG)
logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG)
logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)

logging.getLogger('pysimplesoap').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.server').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.simplexml').setLevel(logging.DEBUG)
logging.getLogger('pysimplesoap.transport').setLevel(logging.DEBUG)

objdir = os.path.abspath("@top_builddir@")
url = 'file://%s/xml/service/analysis.wsdl.test' % (objdir,)

#
# Setup SOAP client
#
client = Client(url,cache=None)

#
# Start running commands
#

names = client.service.ListAnalysisDescNames()
descs = client.service.ListAnalysisDescs()

ttypes = client.service.ListTargetTypes()

tspec = client.factory.create('TargetSpecT')
tspec._type = "ptrace"
tspec.mode = "live"
tspec.startPaused = True
tspec.logStdout = True
tspec.logStderr = True
tspec.stdinBytes = binascii.b2a_hex("hello world\n")
tspec.stdinBytes = None
tspec.backendSpec.targetPtraceSpec = client.factory.create('TargetPtraceSpecT')
tspec.backendSpec.targetPtraceSpec.program = "/bin/cat"
#tspec.backendSpec.targetPtraceSpec.program = "/bin/ndh_rop"
tspec.backendSpec.targetPtraceSpec.arguments = None
#tspec.backendSpec.targetPtraceSpec.arguments = [ { 'argument' : '61616161616161616161616158840408a0970408708404082f2f75736b84040858840408a497040870840408722f62696b84040858840408a8970408708404086e2f6e656b84040858840408ac97040870840408746361746b84040858840408b0970408688404086b84040858840408b1970408708404082d6c74706b84040858840408b597040870840408333333336b84040858840408b9970408688404086b84040858840408ba970408708404082d652f2f6b84040858840408be970408708404082f62696e6b84040858840408c2970408708404082f2f73686b84040858840408c6970408688404086b84040858840408c897040870840408a09704086b84040858840408cc97040870840408b19704086b84040858840408d097040870840408ba9704086b84040858840408d4970408688404086b84040858840408d5970408688404086b84040858840408d6970408688404086b84040858840408d7970408688404086b84040858840408a097040874840408c89704087c840408d497040868840408628404086284040862840408628404086284040862840408628404086284040862840408628404086284040864840408' } ]
tspec.backendSpec.targetPtraceSpec.environment = None

aspec = client.factory.create('AnalysisSpecT')
aspec.name = "RopComeFrom"
aspec.stdinBytes = binascii.b2a_hex("40183b,401840 add(rsp,0x8);ret\n")
#aspec.stdinBytes = '383034383431662c3830343834323520616464286573702c30783034293b706f7028656278293b706f7028656270293b7265740a383034383432322c3830343834323520706f7028656278293b706f7028656270293b7265740a383034383432332c3830343834323520706f7028656270293b7265740a383034383435352c38303438343538206d6f76286562702c657370293b7265740a383034383435382c3830343834356120706f7028656278293b7265740a383034383435652c3830343834363020696e6328657369293b7265740a383034383436322c3830343834363420696e6328656178293b7265740a383034383436382c3830343834366220786f72286561782c656178293b7265740a383034383436622c38303438343665206d6f762864776f72645f7074725f5b6562785d2c656178293b7265740a383034383437302c3830343834373220706f7028656178293b7265740a383034383437342c3830343834373620706f7028656378293b7265740a383034383437632c3830343834376520706f7028656478293b7265740a383034383533312c38303438353335206d6f76286562702c657370293b706f7028656270293b7265740a383034383561342c3830343835613920706f7028656278293b706f7028657369293b706f7028656469293b706f7028656270293b7265740a383034383561392c38303438356164206d6f76286562782c64776f72645f7074725f5b6573705d293b7265740a'
aspec.logStdout = True
aspec.logStderr = True
aspec.reportStdoutIntermediateResults = True
aspec.reportStderrIntermediateResults = True
aspec.autoparseSimpleResults = True

listener = dict({ 'hostname':'localhost','port':3952 })
analysis = client.service.InstantiateAnalysis(aspec,tspec,listener)
