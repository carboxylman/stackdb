## -*- mode: Makefile -*-
##
## Copyright (c) 2013, 2014 The University of Utah
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of
## the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

###############################################################################

SRCDIR		= @srcdir@
TOP_SRCDIR	= @top_srcdir@
SUBDIR		= xml/client/java
OBJDIR		= @top_builddir@

SUBDIRS = 

include $(OBJDIR)/Makeconf

NS=http://anathema.flux.utah.edu/schema/vmi/1

PACKAGE = vmi1

JAVA = @JAVA@
JAVAC = @JAVAC@
JAR = @JAR@
JDB = @JDB@
JAVA_HOME = @JAVA_HOME@

AXIS2_HOME = @AXIS2_HOME@
AXIS2_CLASSPATH := $(shell JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) $(SRCDIR)/dump_axis2_env.sh | grep AXIS2_CLASSPATH= | sed -e s/AXIS2_CLASSPATH=//)

AXIS2_DB :=  "adb"
#AXIS2_DB := "jaxbri"
#AXIS2_DB :=  "jibx"
#
# Adjust classpath stuff for different databindings.
#
ifeq ($(AXIS2_DB),"jaxbri")
    BUILD_CLASSPATH := @abs_builddir@/debuginfo/build/lib/Debuginfo-test-client.jar:@abs_builddir@/target/build/lib/Target-test-client.jar:@abs_builddir@/analysis/build/lib/Analysis-test-client.jar
else
#@abs_builddir@/debuginfo/build/lib/debuginfo.jar:@abs_builddir@/target/build/lib/target.jar:@abs_builddir@/target-extra/build/lib/target-extra.jar:
    BUILD_CLASSPATH := @abs_builddir@/debuginfo/build/classes:@abs_builddir@/target/build/classes:@abs_builddir@/target-extra/build/classes:@abs_builddir@/analysis/build/classes:@abs_builddir@/analysis-extra/build/classes
endif
RUN_CLASSPATH := @abs_builddir@/debuginfo-all.jar:@abs_builddir@/target-all.jar:@abs_builddir@/analysis-all.jar
#
# Only enable if you are using adb and want validation disabled.  For now,
# we default to this because ADB without validation does not work with our 
# schemas.
#
AXIS2_DB_OPTS := 
ifeq ($(AXIS2_DB),"adb")
    AXIS2_DB_OPTS := -Eosv
endif

ANT = @ANT@

LOG4J_DEBUG = ""

ifneq ($(CLASSPATH),"")
    BUILD_CLASSPATH := $(AXIS2_CLASSPATH):$(BUILD_CLASSPATH):$(CLASSPATH)
    RUN_CLASSPATH := $(AXIS2_CLASSPATH):$(RUN_CLASSPATH):$(CLASSPATH)
else
    BUILD_CLASSPATH := $(AXIS2_CLASSPATH):$(BUILD_CLASSPATH)
    RUN_CLASSPATH := $(AXIS2_CLASSPATH):$(RUN_CLASSPATH)
endif

STUBS = debuginfo/src/$(PACKAGE)/DebuginfoStub.java \
	target/src/$(PACKAGE)/TargetStub.java\
	analysis/src/$(PACKAGE)/AnalysisStub.java
SERVERSTUBS = target/src/$(PACKAGE)/TargetListenerSkeleton.java \
	      analysis/src/$(PACKAGE)/AnalysisListenerSkeleton.java
JARS =  debuginfo/build/lib/debuginfo.jar debuginfo-all.jar \
	target/build/lib/target.jar target-extra/build/lib/target-extra.jar \
	target-all.jar \
	analysis/build/lib/analysis.jar analysis-extra/build/lib/analysis-extra.jar \
	analysis-all.jar

TARGET_LIBS = CustomURIResolver.class URLWSDLLocator.class ResourceSchemaGenerator.class \
	      SimpleService.class SimpleServiceServer.class \
	      SimpleTargetListener.class

ANALYSIS_LIBS = CustomURIResolver.class URLWSDLLocator.class ResourceSchemaGenerator.class \
	      SimpleService.class SimpleServiceServer.class \
	      SimpleAnalysisListener.class

PROGRAMS = DebuginfoTest.class TargetTest.class 

##
## This whole thing is tricky to parallelize, probably because the Axis
## interface/stub generation generates both server stubs and client listener
## stubs -- and to do that, they generate .java source files in the same build
## dir, so the build waits until both are generated -- I think!  It's been
## years...
##
## (It does help, to the tune of 21s in parallel vs 44s single-thread, with
## 8 parallel jobs, on a quad-core 3.4GHz machine.)
##
## XXX: comment this out if your build exhibits weird failures, I guess!
##
#.NOTPARALLEL:

##
## Hack up some dependencies so we can parallelize the build!
##
target-extra/build/$(PACKAGE)/SimpleTargetListener.class: target/src/$(PACKAGE)/TargetListenerSkeleton.java target/build/lib/target.jar
target-extra/build/$(PACKAGE)/ResourceSchemaGenerator.class: target-extra/build/$(PACKAGE)/CustomURIResolver.class
target-extra/build/$(PACKAGE)/SimpleServiceServer.class: target-extra/build/$(PACKAGE)/SimpleService.class target-extra/build/$(PACKAGE)/ResourceSchemaGenerator.class
analysis-extra/build/$(PACKAGE)/SimpleAnalysisListener.class: analysis/src/$(PACKAGE)/AnalysisListenerSkeleton.java analysis/build/lib/analysis.jar
analysis-extra/build/$(PACKAGE)/ResourceSchemaGenerator.class: analysis-extra/build/$(PACKAGE)/CustomURIResolver.class
analysis-extra/build/$(PACKAGE)/SimpleServiceServer.class: analysis-extra/build/$(PACKAGE)/SimpleService.class analysis-extra/build/$(PACKAGE)/ResourceSchemaGenerator.class

all:	run.sh run-db.sh $(PROGRAMS) $(JARS) all-subdirs

include $(TOP_SRCDIR)/Makerules

log4j.properties:
	echo -n "" > $@
	echo "log4j.rootLogger=debug, stdout, R" >> $@
	echo "log4j.appender.stdout=org.apache.log4j.ConsoleAppender" >> $@
	echo "log4j.appender.stdout.layout=org.apache.log4j.PatternLayout" >> $@

# Pattern to output the caller's file name and line number.
	echo "log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n" >> $@
	echo "log4j.appender.R=org.apache.log4j.RollingFileAppender" >> $@
	echo "log4j.appender.R.File=server.log" >> $@
	echo "log4j.appender.R.MaxFileSize=10000KB" >> $@
	echo "log4j.appender.R.MaxBackupIndex=10" >> $@
	echo "log4j.appender.R.layout=org.apache.log4j.PatternLayout" >> $@
	echo "log4j.appender.R.layout.ConversionPattern=%p [%t] (%F:%L) - %m%n" >> $@

run.sh: log4j.properties
	echo "#!/bin/sh" > $@
	echo "" >> $@
	echo "$(JAVA) \\" >> $@
ifneq ($(LOG4J_DEBUG),"")
	echo "    -Dlog4j.configuration=file:@abs_builddir@/log4j.properties \\" >> $@
endif
	echo "    -classpath $(RUN_CLASSPATH) \\" >> $@
	echo "    -Djava.endorsed.dirs=${AXIS2_HOME}/lib/endorsed:$(JAVA_HOME)/jre/lib/endorsed:$(JAVA_HOME)/lib/endorsed \\" >> $@
#	echo "    -Djava.security.manager \\" >> $@
#	echo "    -Djava.security.policy=$(AXIS2_HOME)/conf/axis2.policy \\"
	echo "    -Daxis2.home=$(AXIS2_HOME) \\" >> $@
	echo "    -Dsun.lang.ClassLoader.allowArraySyntax=true \\" >> $@
	echo '    $$@' >> $@
	chmod ug+x $@

run-db.sh: log4j.properties
	echo "#!/bin/sh" > $@
	echo "" >> $@
	echo "$(JDB) \\" >> $@
ifneq ($(LOG4J_DEBUG),"")
	echo "    -Dlog4j.configuration=file:@abs_builddir@/log4j.properties \\" >> $@
endif
	echo "    -classpath $(RUN_CLASSPATH) \\" >> $@
	echo "    -Djava.endorsed.dirs=${AXIS2_HOME}/lib/endorsed:$(JAVA_HOME)/jre/lib/endorsed:$(JAVA_HOME)/lib/endorsed \\" >> $@
#	echo "    -Djava.security.manager \\" >> $@
#	echo "    -Djava.security.policy=$(AXIS2_HOME)/conf/axis2.policy \\"
	echo "    -Daxis2.home=$(AXIS2_HOME) \\" >> $@
	echo "    -Dsun.lang.ClassLoader.allowArraySyntax=true \\" >> $@
	echo '    $$@' >> $@
	chmod ug+x $@

debuginfo/src/$(PACKAGE)/DebuginfoStub.java: $(OBJDIR)/xml/service/debuginfo.wsdl.test
	mkdir -p debuginfo
	JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) \
		${AXIS2_HOME}/bin/wsdl2java.sh -d $(AXIS2_DB) $(AXIS2_DB_OPTS) \
		 -o debuginfo -ns2p $(NS)=vmi1 -p $(PACKAGE) -or -u -uri $<

target/src/$(PACKAGE)/TargetListenerSkeleton.java: $(OBJDIR)/xml/service/targetListener.wsdl.test
	mkdir -p target
	rm -f target/build.xml
	JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) \
		${AXIS2_HOME}/bin/wsdl2java.sh -d $(AXIS2_DB) $(AXIS2_DB_OPTS) \
		-o target -ns2p $(NS)=vmi1 -p $(PACKAGE) -or -ss -uri $<

##
## NB: the first "dependency" forces the listener skeletons to be built before
## (and in series with!) the server stubs -- because they all get *compiled*
## into a single package, I think.
##
target/src/$(PACKAGE)/TargetStub.java: target/src/$(PACKAGE)/TargetListenerSkeleton.java $(OBJDIR)/xml/service/target.wsdl.test
	mkdir -p target
	rm -f target/build.xml
	JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) \
		${AXIS2_HOME}/bin/wsdl2java.sh -d $(AXIS2_DB) $(AXIS2_DB_OPTS) \
		 -o target -ns2p $(NS)=vmi1 -p $(PACKAGE) -or -u -uri \
		$(OBJDIR)/xml/service/target.wsdl.test

analysis/src/$(PACKAGE)/AnalysisListenerSkeleton.java: $(OBJDIR)/xml/service/analysisListener.wsdl.test
	mkdir -p analysis
	rm -f analysis/build.xml
	JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) \
		${AXIS2_HOME}/bin/wsdl2java.sh -d $(AXIS2_DB) $(AXIS2_DB_OPTS) \
		-o analysis -ns2p $(NS)=vmi1 -p $(PACKAGE) -or -ss -uri $<

##
## NB: the first "dependency" forces the listener skeletons to be built before
## (and in series with!) the server stubs -- because they all get *compiled*
## into a single package, I think.
##
analysis/src/$(PACKAGE)/AnalysisStub.java: analysis/src/$(PACKAGE)/AnalysisListenerSkeleton.java $(OBJDIR)/xml/service/analysis.wsdl.test
	mkdir -p analysis
	rm -f analysis/build.xml
	JAVA_HOME=$(JAVA_HOME) AXIS2_HOME=$(AXIS2_HOME) \
		${AXIS2_HOME}/bin/wsdl2java.sh -d $(AXIS2_DB) $(AXIS2_DB_OPTS) \
		 -o analysis -ns2p $(NS)=vmi1 -p $(PACKAGE) -or -u -uri \
		$(OBJDIR)/xml/service/analysis.wsdl.test

debuginfo/build/lib/debuginfo.aar: debuginfo/src/$(PACKAGE)/DebuginfoStub.java
	(JAVA_HOME=$(JAVA_HOME) CLASSPATH=$(BUILD_CLASSPATH) \
		AXIS2_HOME=$(AXIS2_HOME) AXIS2_CLASSPATH=$(AXIS2_CLASSPATH) \
		$(ANT) -buildfile debuginfo/build.xml jar.all)

debuginfo/build/lib/debuginfo.jar: debuginfo/build/lib/debuginfo.aar
	cp -p $< $@

debuginfo-all.jar: debuginfo/build/lib/debuginfo.jar
	cp -p $< $@

target/build/lib/target.aar: target/src/$(PACKAGE)/TargetListenerSkeleton.java \
		target/src/$(PACKAGE)/TargetStub.java 
	(JAVA_HOME=$(JAVA_HOME) CLASSPATH=$(BUILD_CLASSPATH) \
		AXIS2_HOME=$(AXIS2_HOME) AXIS2_CLASSPATH=$(AXIS2_CLASSPATH) \
		$(ANT) -buildfile target/build.xml jar.all)

target/build/lib/target.jar: target/build/lib/target.aar
	cp -p $< $@

target-all.jar: target/build/lib/target.jar target-extra/build/lib/target-extra.jar
	rm -f $@
	$(JAR) -cf $@ -C target/build/classes/ vmi1 -C target resources
	$(JAR) -uf $@ -C target-extra/build/ vmi1 -C target/resources .

target-extra/build/$(PACKAGE)/%.class: $(SRCDIR)/%.java
	mkdir -p target-extra/build/vmi1
	$(JAVAC) -g -classpath $(BUILD_CLASSPATH):target-extra/build -d target-extra/build/ $<

target-extra/build/lib/target-extra.jar: $(addprefix target-extra/build/$(PACKAGE)/,$(TARGET_LIBS)) \
		target/build/lib/target.jar
#	rm -rf target-extra
	mkdir -p target-extra/build/lib
#	mkdir -p target-extra/resources
#	cp -pR target/resources/* target-extra/resources/
#	cp -pR target/resources/* target-extra/
	(JAVA_HOME=$(JAVA_HOME) CLASSPATH=$(BUILD_CLASSPATH) \
		AXIS2_HOME=$(AXIS2_HOME) AXIS2_CLASSPATH=$(AXIS2_CLASSPATH) \
		$(JAR) cvf $@ -C target-extra/build vmi1 -C target/resources .)

analysis/build/lib/analysis.aar: analysis/src/$(PACKAGE)/AnalysisListenerSkeleton.java \
		analysis/src/$(PACKAGE)/AnalysisStub.java 
	(JAVA_HOME=$(JAVA_HOME) CLASSPATH=$(BUILD_CLASSPATH) \
		AXIS2_HOME=$(AXIS2_HOME) AXIS2_CLASSPATH=$(AXIS2_CLASSPATH) \
		$(ANT) -buildfile analysis/build.xml jar.all)

analysis/build/lib/analysis.jar: analysis/build/lib/analysis.aar
	cp -p $< $@

analysis-all.jar: analysis/build/lib/analysis.jar analysis-extra/build/lib/analysis-extra.jar
	rm -f $@
	$(JAR) -cf $@ -C analysis/build/classes/ vmi1 -C analysis resources
	$(JAR) -uf $@ -C analysis-extra/build/ vmi1 -C analysis/resources .

analysis-extra/build/$(PACKAGE)/%.class: $(SRCDIR)/%.java
	mkdir -p analysis-extra/build/vmi1
	$(JAVAC) -g -classpath $(BUILD_CLASSPATH):analysis-extra/build -d analysis-extra/build/ $<

analysis-extra/build/lib/analysis-extra.jar: $(addprefix analysis-extra/build/$(PACKAGE)/,$(ANALYSIS_LIBS)) \
		analysis/build/lib/analysis.jar
#	rm -rf analysis-extra
	mkdir -p analysis-extra/build/lib
#	mkdir -p analysis-extra/resources
#	cp -pR analysis/resources/* analysis-extra/resources/
#	cp -pR analysis/resources/* analysis-extra/
	(JAVA_HOME=$(JAVA_HOME) CLASSPATH=$(BUILD_CLASSPATH) \
		AXIS2_HOME=$(AXIS2_HOME) AXIS2_CLASSPATH=$(AXIS2_CLASSPATH) \
		$(JAR) cvf $@ -C analysis-extra/build vmi1 -C analysis/resources .)

DebuginfoTest.class: DebuginfoTest.java debuginfo/build/lib/debuginfo.aar
	$(JAVAC) -classpath $(BUILD_CLASSPATH) DebuginfoTest.java

TargetTest.class: TargetTest.java target/build/lib/target.aar
	$(JAVAC) -classpath $(BUILD_CLASSPATH) TargetTest.java

install: def-install install-subdirs

clean: clean-subdirs
	rm -rf $(STUBS) $(SERVERSTUBS) 
	rm -f $(PROGRAMS) $(JARS)
	rm -rf debuginfo target target-extra analysis analysis-extra
	rm -f run.sh run-db.sh

distclean: distclean-subdirs

# How to recursively descend into subdirectories to make general
# targets such as `all'.
%.MAKE:
	@$(MAKE) -C $(dir $@) $(basename $(notdir $@))
%-subdirs: $(addsuffix /%.MAKE,$(SUBDIRS)) ;

.PHONY:	$(SUBDIRS)

.SECONDARY:
