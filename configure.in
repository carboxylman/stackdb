AC_PREREQ(2.13)

AC_INIT(Makeconf.in)
AC_CONFIG_AUX_DIR(${srcdir}/autoconf)
AC_PREFIX_DEFAULT(/usr/local)
AC_CONFIG_HEADER(config.h)

##
## XXX we don't care about separate src/obj builddirs for now... just comment.
##

# We use separate source and obj trees.  Configuring in a source
# tree messes it up, so throw an error.
#
# Check that $srcdir, (which defaults to the argv[0] path to the configure
# script,) is different from the current directory.
#

#if test `(cd $srcdir; pwd)` = `pwd`; then
#    if test "$ac_srcdir_defaulted" = yes; then
#	AC_MSG_ERROR(
#	    [You are running the configure script in the current directory.
#Output from configure must go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.])
#    else
#	AC_MSG_ERROR(
#	    [You specified --srcdir= to be the current directory.
#Output from configure should go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.
#Then --srcdir= will be unnecessary.])
#    fi
#fi

#
# Double-check that there isn't a Makeconf.in (the UNIQUE-FILE-IN-SOURCE-DIR)
# in the current directory.
#
#if test -f $ac_unique_file; then
#    AC_MSG_ERROR([The current directory is a source tree containing $ac_unique_file .
#Output from configure should go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.])
#fi

# BEGIN Python detection.
AC_PATH_PROGS(PYTHON, python python2.7 python2.6 python2.5 python2.4 python2.3 python2.2)

if test x"$PYTHON" = x""; then
    AC_MSG_ERROR([python not detected])
fi

PYTHON_VERSION=`${PYTHON} -V 2>&1 | cut -d ' ' -f 2 | cut -d '.' -f 1,2`
PYTHON_PATH=`dirname ${PYTHON}`
if test ! -d "$PYTHON_PATH/include"; then
    PYTHON_PATH=`dirname ${PYTHON_PATH}`
fi
PYTHON_INCLUDE="${PYTHON_PATH}/include/python${PYTHON_VERSION}"
CPPFLAGS="${CPPFLAGS} -I${PYTHON_INCLUDE}"
AC_CHECK_HEADERS([Python.h],
		 [],
		 [AC_MSG_WARN("Cannot find Python.h in ${PYTHON_INCLUDE}")])
AC_SUBST(PYTHON_INCLUDE)
# END Python detection.

#
# Programs we (might) need.
#
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MKDIR_P
AC_PROG_INSTALL
AC_PROG_YACC
AC_PROG_LEX

AC_PATH_PROG(AR, ar)
if test -z "$AR" ; then
    AC_MSG_ERROR([no acceptable ar found in \$PATH])
fi
AC_PATH_PROG(LD, ld)
if test -z "$LD" ; then
    AC_MSG_ERROR([no acceptable ld found in \$PATH])
fi
AC_PATH_PROG(RM, rm)
if test -z "$RM" ; then
    AC_MSG_ERROR([no acceptable rm found in \$PATH])
fi
AC_PATH_PROG(CP, cp)
if test -z "$CP" ; then
    AC_MSG_ERROR([no acceptable cp found in \$PATH])
fi
AC_PATH_PROG(TAR, tar)
if test -z "$TAR" ; then
    AC_MSG_ERROR([no tar found in \$PATH])
fi
AC_PATH_PROG(LIBTOOL, libtool)
if test -z "$LIBTOOL" ; then
    AC_MSG_ERROR([no libtool found in \$PATH])
fi
AC_PATH_PROG(SUDO, sudo)
if test -z "$SUDO" ; then
    AC_MSG_ERROR([no sudo found in \$PATH])
fi
AC_PATH_PROG(SWIG, swig)
if test -z "$SWIG" ; then
    AC_MSG_ERROR([no swig found in \$PATH])
fi

AC_EXEEXT

AC_SUBST(optional_subdirs)

#
# Path to xenaccess
#
#AC_ARG_WITH(xenaccess
#[  --with-xenaccess=<DIR> Specify the path to the brainstem installation.],
#[
#    if test x"$withval" != x""; then
#	BRAINSTEM_DIR="$withval"
#    else
#	AC_MSG_ERROR([You must specify a brainstem directory]);
#    fi
#],[
#    BRAINSTEM_DIR=""
#])
#AC_SUBST(BRAINSTEM_DIR)

#
# Check for ulsshxmlrpc header
#
#AC_CHECK_HEADERS([ulxmlrpcpp/ulxr_config.h],
#		 [AC_DEFINE(HAVE_ULXMLRPCPP)
#		  HAVE_ULXMLRPCPP="yes"])
#AC_SUBST(HAVE_ULXMLRPCPP)

#
# Check for the robot vision system dependencies.
#
#AC_CHECK_HEADERS([linux/videodev.h],
#		 [AC_DEFINE(HAVE_LINUX_VIDEODEV_H)
#		  HAVE_LINUX_VIDEODEV_H="yes"])
#AC_CHECK_PROG(GTK_CONFIG, gtk-config, gtk-config)

#AC_ARG_ENABLE(mezzanine,
#[  --enable-mezzanine    Enable mezzanine support])

#if test x"$HAVE_LINUX_VIDEODEV_H" != x"" && test x"$GTK_CONFIG" != x""; then
#    HAVE_MEZZANINE="$enable_mezzanine"
#    AC_DEFINE([HAVE_MEZZANINE])
#else
#    HAVE_MEZZANINE="no"
#fi
#AC_SUBST(HAVE_MEZZANINE)

# Make sure $INSTALL is valid at any depth in our tree, i.e. make it absoulte.
# This can be needed when no valid install is found and autoconf falls back on
# the supplied install.sh, but we called 'configure' with a relative path.
AC_PROG_INSTALL
[case "$INSTALL" in
..*)
        INSTALL=`pwd`/$INSTALL
        ;;
esac]

outfiles="$outfiles Makeconf Makefile \
          xenaccess/Makefile vmprobes/Makefile vmprobes/examples/Makefile"

#
# Do this for easy distclean.
#
DISTCLEAN_FILES="$outfiles"
AC_SUBST(DISTCLEAN_FILES)

AC_OUTPUT($outfiles)
