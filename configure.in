## -*- mode: Autoconf -*-
##
## Copyright (c) 2011, 2012, 2013 The University of Utah
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of
## the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

###############################################################################

AC_PREREQ(2.13)

AC_INIT(Makeconf.in)
AC_CONFIG_AUX_DIR(${srcdir}/autoconf)
AC_PREFIX_DEFAULT(/usr/local)
AC_CONFIG_HEADER(config.h)

ABS_BUILDDIR=`pwd`
AC_DEFINE([ABS_BUILDDIR],"$ABS_BUILDDIR",[Absolute build dir])
#AC_SUBST(ABS_BUILDDIR)

##
## XXX we don't care about separate src/obj builddirs for now... just comment.
##

# We use separate source and obj trees.  Configuring in a source
# tree messes it up, so throw an error.
#
# Check that $srcdir, (which defaults to the argv[0] path to the configure
# script,) is different from the current directory.
#

#if test `(cd $srcdir; pwd)` = `pwd`; then
#    if test "$ac_srcdir_defaulted" = yes; then
#	AC_MSG_ERROR(
#	    [You are running the configure script in the current directory.
#Output from configure must go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.])
#    else
#	AC_MSG_ERROR(
#	    [You specified --srcdir= to be the current directory.
#Output from configure should go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.
#Then --srcdir= will be unnecessary.])
#    fi
#fi

#
# Double-check that there isn't a Makeconf.in (the UNIQUE-FILE-IN-SOURCE-DIR)
# in the current directory.
#
#if test -f $ac_unique_file; then
#    AC_MSG_ERROR([The current directory is a source tree containing $ac_unique_file .
#Output from configure should go into an obj tree, not a source tree!
#cd to the top of an obj tree, and run the configure in your source tree.])
#fi

# BEGIN Python detection.
AC_PATH_PROGS(PYTHON, python python2.7 python2.6 python2.5 python2.4 python2.3 python2.2)

if test x"$PYTHON" = x""; then
    AC_MSG_ERROR([python not detected])
fi

PYTHON_VERSION=`${PYTHON} -V 2>&1 | cut -d ' ' -f 2 | cut -d '.' -f 1,2`
PYTHON_PATH=`dirname ${PYTHON}`
if test ! -d "$PYTHON_PATH/include"; then
    PYTHON_PATH=`dirname ${PYTHON_PATH}`
fi
PYTHON_INCLUDE="${PYTHON_PATH}/include/python${PYTHON_VERSION}"
PYTHON_LIB="${PYTHON_PATH}/lib/python${PYTHON_VERSION}"
OLD_CPPFLAGS="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS} -I${PYTHON_INCLUDE}"
AC_CHECK_HEADERS([Python.h],
		 [ENABLE_PYTHON=1],
		 [AC_MSG_WARN("Cannot find Python.h in ${PYTHON_INCLUDE}");
		  ENABLE_PYTHON=0])
CPPFLAGS="${OLD_CPPFLAGS}"
AC_SUBST(PYTHON_INCLUDE)
AC_SUBST(PYTHON_LIB)
AC_SUBST(ENABLE_PYTHON)
# END Python detection.

#
# Programs we (might) need.
#
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MKDIR_P
AC_PROG_INSTALL
AC_PROG_YACC
AC_PROG_LEX

AC_PATH_PROG(AR, ar)
if test -z "$AR" ; then
    AC_MSG_ERROR([no acceptable ar found in \$PATH])
fi
AC_PATH_PROG(LD, ld)
if test -z "$LD" ; then
    AC_MSG_ERROR([no acceptable ld found in \$PATH])
fi
AC_PATH_PROG(RM, rm)
if test -z "$RM" ; then
    AC_MSG_ERROR([no acceptable rm found in \$PATH])
fi
AC_PATH_PROG(CP, cp)
if test -z "$CP" ; then
    AC_MSG_ERROR([no acceptable cp found in \$PATH])
fi
AC_PATH_PROG(TAR, tar)
if test -z "$TAR" ; then
    AC_MSG_ERROR([no tar found in \$PATH])
fi
AC_PATH_PROG(LIBTOOL, libtool)
if test -z "$LIBTOOL" ; then
    AC_MSG_ERROR([no libtool found in \$PATH])
fi
AC_PATH_PROG(SUDO, sudo)
if test -z "$SUDO" ; then
    AC_MSG_ERROR([no sudo found in \$PATH])
fi
AC_PATH_PROG(SWIG, swig)
if test -z "$SWIG" ; then
    AC_MSG_ERROR([no swig found in \$PATH])
fi

AC_EXEEXT

AC_SUBST(optional_subdirs)

# Make sure $INSTALL is valid at any depth in our tree, i.e. make it absoulte.
# This can be needed when no valid install is found and autoconf falls back on
# the supplied install.sh, but we called 'configure' with a relative path.
AC_PROG_INSTALL
[case "$INSTALL" in
..*)
        INSTALL=`pwd`/$INSTALL
        ;;
esac]

#
# Check glib.
#
GLIB=/usr
AC_ARG_WITH([glib],
  AS_HELP_STRING([--with-glib=DIRECTORY],
    [find glib install in DIRECTORY]),
  [GLIB="$with_glib"])
if test ! "$GLIB" = "/usr" ; then
    old_PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
    export PKG_CONFIG_PATH="$GLIB/lib/pkgconfig"
fi
old_CFLAGS=$CFLAGS
CFLAGS=`pkg-config --cflags glib-2.0`" $CFLAGS"
AC_CHECK_TYPE(GHashTableIter,
    [],
    [AC_MSG_ERROR([Your glib does not have hash table iterators; upgrade to >= 2.16!])],
    [[#include <glib.h>]])
if test ! "$GLIB" = "/usr" ; then
    export PKG_CONFIG_PATH="$old_PKG_CONFIG_PATH"
fi
CFLAGS="$old_CFLAGS"
AC_SUBST(GLIB)

#
# Check distorm.
#
DISTORM=/usr/local
ENABLE_DISTORM=1
AC_ARG_ENABLE(distorm,
	      AS_HELP_STRING([--disable-distorm],
                             [Disable distorm support]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_DISTORM=0; \
	       else \
	           ENABLE_DISTORM=1; \
	       fi],
	      [ENABLE_DISTORM=1])
if test "$ENABLE_DISTORM" = "1"; then 
    AC_ARG_WITH([distorm],
      AS_HELP_STRING([--with-distorm=DIRECTORY],
        [find distorm install in DIRECTORY]),
        [DISTORM="$with_distorm"])
    OLD_CPPFLAGS="${CPPFLAGS}"
    CPPFLAGS="${CPPFLAGS} -I${DISTORM}/include"
    AC_CHECK_HEADERS([distorm.h],
		     [],
		     [AC_MSG_ERROR("Cannot find distorm.h in ${DISTORM}/include")])
    AC_CHECK_HEADERS([mnemonics.h],
		     [],
		     [AC_MSG_ERROR("Cannot find mnemonics.h in ${DISTORM}/include; make sure you installed distorm's mnemonics.h as noted in the README!")])
    CPPFLAGS="${OLD_CPPFLAGS}"

    old_LDLP=$LD_LIBRARY_PATH
    LD_LIBRARY_PATH="$DISTORM/lib:$LD_LIBRARY_PATH"
    ld_LDFL=$LDFLAGS
    LDFLAGS="-L$DISTORM/lib $LDFLAGS"
    AC_CHECK_LIB(distorm3,distorm_decompose64,
   	 [ENABLE_DISTORM=1],
   	 [AC_MSG_WARN([Your distorm does not have distorm_decompose; disabling])],
	 [-ldistorm3])
    LD_LIBRARY_PATH="$old_LDLP"
    LDFLAGS="$old_LDFL"
fi
AC_SUBST(DISTORM)
AC_SUBST(ENABLE_DISTORM)

#
# Check elfutils.
#
ELFUTILS=/usr/local
AC_ARG_WITH([elfutils],
  AS_HELP_STRING([--with-elfutils=DIRECTORY],
    [find elfutils install in DIRECTORY]),
  [ELFUTILS="$with_elfutils"])
if test "$ELFUTILS" != "/usr/local"; then
    if test ! -e "$ELFUTILS/include/elfutils/libdw.h" ; then
        AC_MSG_ERROR([cannot find elfutils in "$ELFUTILS"])
    fi
else
    if test ! -e "$ELFUTILS/include/elfutils/libdw.h" ; then
        ELFUTILS=/usr
        if test ! -e "$ELFUTILS/include/elfutils/libdw.h" ; then
            AC_MSG_ERROR([cannot find elfutils])
        fi
    fi
fi
if test ! -z "$with_elfutils" ; then
    old_LDLP=$LD_LIBRARY_PATH
    LD_LIBRARY_PATH="$ELFUTILS/lib:$ELFUTILS/lib/elfutils/lib:$LD_LIBRARY_PATH"
    old_LDFL=$LDFLAGS
    LDFLAGS="-L$ELFUTILS/lib -L$ELFUTILS/lib/elfutils/lib $LDFLAGS"
fi
AC_CHECK_LIB(dw,dwarf_next_unit,
    [AC_DEFINE([LIBDW_HAVE_NEXT_UNIT],[1],
               [Define to 1 to mark libdw has dwarf_next_unit])],
    [AC_MSG_WARN([Your elfutils does not have dwarf_next_unit; cannot use DWARF version info])],
    [-lelf -lebl])
if test ! -z "$with_elfutils" ; then
    LD_LIBRARY_PATH="$old_LDLP"
    LDFLAGS="$old_LDFL"
fi
AC_SUBST(ELFUTILS)

#
# Now, if this version of elfutils doesn't install version.h, try to figure out
# its version.
#
if test ! -e "$ELFUTILS/include/elfutils/version.h" ; then
    AC_DEFINE([ELFUTILS_NO_VERSION_H],[1],[Define to mark elfutils has no version.h])
    if test -x "$ELFUTILS/bin/eu-objdump" ; then
        EV=`"$ELFUTILS/bin/eu-objdump" -V | sed -r -n -e 's/objdump.*[[0-9]]\.([[0-9]]+)/\1/p'`
    elif test -x "$ELFUTILS/bin/vmi-eu-objdump" ; then
        EV=`"$ELFUTILS/bin/vmi-eu-objdump" -V | sed -r -n -e 's/objdump.*[[0-9]]\.([[0-9]]+)/\1/p'`
    elif test -x "$ELFUTILS/bin/objdump" ; then
        EV=`"$ELFUTILS/bin/objdump" -V | sed -r -n -e 's/objdump.*[[0-9]]\.([[0-9]]+)/\1/p'`
    fi
    if test "$?" != 0 ; then
        AC_MSG_WARN([Could not detect elfutils version; build will probably break])
        AC_DEFINE_UNQUOTED([ELFUTILS_BIN_VERSION],[0],[Define this with version obtained from elfutils objdump])
    else 
        AC_DEFINE_UNQUOTED([ELFUTILS_BIN_VERSION],$EV,[Define this with version obtained from elfutils objdump])
    fi
fi

#
# Check Judy.
#
AC_ARG_WITH([judy],
  AS_HELP_STRING([--with-judy=DIRECTORY],
    [find judy install in DIRECTORY]),
  [JUDY="$with_judy"])
if test -z "$JUDY" ; then
    # look in usual places
    JUDY=/usr/local
    if test ! -e "$JUDY/include/Judy.h" ; then
        JUDY=/usr
        if test ! -e "$JUDY/include/Judy.h" ; then
            AC_MSG_ERROR([cannot find judy])
        fi
    fi
else
    if test ! -e "$JUDY/include/Judy.h" ; then
       AC_MSG_ERROR([cannot find judy])
    fi
fi
AC_SUBST(JUDY)

#
# VMI support, via either xenaccess or libvmi.
# Right now the default is VMI enabled with xenaccess.
#    --enable-libvmi	  will enable VMI via libvmi instead
#    --disable-xenaccess  will disable all VMI
#
ENABLE_XENACCESS=1
ENABLE_LIBVMI=0
ENABLE_XENACCESS_DEBUG=1

AC_ARG_ENABLE(xenaccess,
	      AS_HELP_STRING([--disable-xenaccess],
                             [Disable xenaccess support]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_XENACCESS=0; \
	       else \
	           ENABLE_XENACCESS=1; ENABLE_LIBVMI=0; \
	       fi])
AC_SUBST(ENABLE_XENACCESS)
AC_ARG_ENABLE(xenaccess-debug,
	      AS_HELP_STRING([--disable-xenaccess-debug],
                             [Disable xenaccess debug output]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_XENACCESS_DEBUG=0; \
	       else \
	           ENABLE_XENACCESS_DEBUG=1; \
	       fi])
AC_SUBST(ENABLE_XENACCESS_DEBUG)

LIBVMI=/usr/local
AC_ARG_ENABLE(libvmi,
	      AS_HELP_STRING([--disable-libvmi],
                             [Disable libvmi support]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_LIBVMI=0; \
	       else \
	           ENABLE_LIBVMI=1; ENABLE_XENACCESS=0; ENABLE_XENACCESS_DEBUG=0; \
	       fi])
if test "$ENABLE_LIBVMI" = "1"; then 
    AC_ARG_WITH([libvmi],
      AS_HELP_STRING([--with-libvmi=DIRECTORY],
        [find libvmi install in DIRECTORY]),
        [LIBVMI="$with_libvmi"])
    AC_CHECK_HEADERS([libvmi/libvmi.h],
		      [],
		      [AC_MSG_ERROR("Cannot find libvmi/libvmi.h; install libvmi!")])
fi
AC_SUBST(LIBVMI)
AC_SUBST(ENABLE_LIBVMI)

#
# Check for the needed Xen, libxc, and libxenstore headers.
#
if test "$ENABLE_LIBVMI" = "1" -o "$ENABLE_XENACCESS" = "1" ; then
     AC_CHECK_HEADERS([xenctrl.h],
		      [],
		      [AC_MSG_ERROR("Cannot find xenctrl.h; install libxc-devel!")])
     AC_CHECK_HEADERS([xs.h],
		      [],
		      [AC_MSG_ERROR("Cannot find xs.h; install libxenstore-devel!")])
     AC_CHECK_HEADERS([xen/xen.h],
		      [],
		      [AC_MSG_ERROR("Cannot find xen/xen.h; install libxen-devel!")])

     ENABLE_XENSUPPORT=1
     AC_DEFINE([ENABLE_XENSUPPORT],[1])
else
     ENABLE_XENSUPPORT=0
fi
AC_SUBST(ENABLE_XENSUPPORT)

#
# Support newer versions of xenctrl that have xc_domain_debug_control for
# HVM domains.
#
AC_CHECK_LIB(xenctrl,xc_domain_debug_control,
             [XC_HAVE_DOMAIN_DEBUG_CONTROL=1],
             [XC_HAVE_DOMAIN_DEBUG_CONTROL=0],
             [])
if test "${XC_HAVE_DOMAIN_DEBUG_CONTROL}" = "1"; then
    AC_DEFINE([XC_HAVE_DOMAIN_DEBUG_CONTROL],[1])
fi
AC_SUBST(XC_HAVE_DOMAIN_DEBUG_CONTROL)

#
# Support older versions of xenctrl that don't have xc_map_foreign_pages.
#
AC_CHECK_LIB(xenctrl,xc_map_foreign_pages,
             [XC_HAVE_MAP_FOREIGN=1],
             [XC_HAVE_MAP_FOREIGN=0],
             [])
AC_SUBST(XC_HAVE_MAP_FOREIGN)

#
# Support time travel.
#
AC_CHECK_LIB(xenctrl,xc_ttd_vmi_add_probe,
             [CONFIG_DETERMINISTIC_TIMETRAVEL=1],
             [CONFIG_DETERMINISTIC_TIMETRAVEL=0],
             [])

# Allow it to be disabled even if autodetected.
AC_ARG_ENABLE(time-travel,
	      AS_HELP_STRING([--disable-time-travel],
                             [Disable time-travel support]),
	      [if test "x$enableval" = "xno"; then \
	           CONFIG_DETERMINISTIC_TIMETRAVEL=0; \
	       else \
	           CONFIG_DETERMINISTIC_TIMETRAVEL=1; \
	       fi],
	      [])
AC_SUBST(CONFIG_DETERMINISTIC_TIMETRAVEL)

ENABLE_XENTTSUPPORT=0
if test "$CONFIG_DETERMINISTIC_TIMETRAVEL" = "1" ; then
    AC_DEFINE([ENABLE_XENTTSUPPORT],[1])
    ENABLE_XENTTSUPPORT=1
fi
AC_SUBST(ENABLE_XENTTSUPPORT)

#
# Support older versions of xenctrl that don't have evtchn_port_or_error_t.
#
AC_CHECK_TYPE(vcpu_guest_context_any_t,
             [AC_DEFINE(XC_HAVE_CONTEXT_ANY)],
             [],
             [#include <xenctrl.h>])
AC_SUBST(XC_HAVE_CONTEXT_ANY)

AC_CHECK_TYPE(evtchn_port_or_error_t,
             [AC_DEFINE(XC_EVTCHN_PORT_T,evtchn_port_or_error_t)],
             [AC_DEFINE(XC_EVTCHN_PORT_T,evtchn_port_t)],
             [#include <xenctrl.h>])
AC_SUBST(XC_EVTCHN_PORT_T)

#
# Check for gsoap
#
AC_ARG_ENABLE(soap,
	      AS_HELP_STRING([--disable-soap],
                             [Disable SOAP XML services and clients]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_SOAP=0; \
	       else \
	           ENABLE_SOAP=1; \
	       fi],
	      [ENABLE_SOAP=1])
AC_SUBST(ENABLE_SOAP)

if test "${ENABLE_SOAP}" = "1"; then
    GSOAP=/usr
    AC_ARG_WITH([gsoap],
      AS_HELP_STRING([--with-gsoap=DIRECTORY],
        [find gsoap install in DIRECTORY]),
      [GSOAP="$with_gsoap"])
    if test ! "$GSOAP" = "/usr" ; then
        old_PATH="$PATH"
        export PATH="${GSOAP}/bin:$PATH"
	GSOAPDIR=$GSOAP
    else
        old_PATH="$PATH"
	GSOAPDIR=""
    fi
    AC_PATH_PROG(SOAPCPP2, soapcpp2)
    if test -z "$SOAPCPP2" ; then
        AC_MSG_ERROR([no acceptable soapcpp2 found in \$PATH])
    fi
    # infer the gsoap dir if it wasn't set, for includes, etc.  It might not be 
    # /usr, like we assumed, if it was elsewhere in the $PATH.
    if test -z "$GSOAPDIR" ; then
       GSOAPDIR=`echo $SOAPCPP2 | sed -e 's/\/bin\/soapcpp2//'`
       GSOAP=$GSOAPDIR
    fi
    AC_PATH_PROG(WSDL2H, wsdl2h)
    if test -z "$WSDL2H" ; then
        AC_MSG_ERROR([no acceptable wsdl2h found in \$PATH])
    fi
    #
    # Check for our patched version of gsoap; error if not!
    #
    $WSDL2H -h 2>&1 | grep -q '^\-M.*'
    if test "$?" != "0"; then
        AC_MSG_ERROR([you must install our patched GSOAP; see README!])
    fi
    export PATH="${old_PATH}"
    AC_SUBST(GSOAP)
    AC_SUBST(SOAPCPP2)
    AC_SUBST(WSDL2H)
    #
    # Grab gsoap version number -- I suck
    #
    V_GSOAP_VERSION=`${SOAPCPP2} -v 2>&1 | grep 'soapcpp2 release' | sed -e 's/\(.* release \)\(.*\)/\2/'`
    AC_DEFINE_UNQUOTED(V_GSOAP_VERSION,${V_GSOAP_VERSION})
    AC_SUBST(V_GSOAP_VERSION)
    V_GSOAP_VERSION_MAJOR=`echo "${V_GSOAP_VERSION}" | cut -d . -f 1`
    AC_DEFINE_UNQUOTED(V_GSOAP_VERSION_MAJOR,${V_GSOAP_VERSION_MAJOR})
    AC_SUBST(V_GSOAP_VERSION_MAJOR)
    V_GSOAP_VERSION_MINOR=`echo "${V_GSOAP_VERSION}" | cut -d . -f 2`
    AC_DEFINE_UNQUOTED(V_GSOAP_VERSION_MINOR,${V_GSOAP_VERSION_MINOR})
    AC_SUBST(V_GSOAP_VERSION_MINOR)
    V_GSOAP_VERSION_PATCH=`echo "${V_GSOAP_VERSION}" | cut -d . -f 3`
    AC_DEFINE_UNQUOTED(V_GSOAP_VERSION_PATCH,${V_GSOAP_VERSION_PATCH})
    AC_SUBST(V_GSOAP_VERSION_PATCH)

    #
    # Tell everybody.
    #
    AC_DEFINE([ENABLE_SOAP],[1])
    AC_SUBST(ENABLE_SOAP)
fi

#
# Control CFLAGS setting in Makeconf.
#
AC_ARG_ENABLE(debuginfo,
	      AS_HELP_STRING([--disable-debuginfo],
                             [Disable debuginfo symbol generation for this package]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_DEBUGINFO=0; \
	       else \
	           ENABLE_DEBUGINFO=1; \
	       fi],
	      [ENABLE_DEBUGINFO=1])
AC_SUBST(ENABLE_DEBUGINFO)
AC_ARG_ENABLE(profiling,
	      AS_HELP_STRING([--enable-profiling],
                             [Enable profiling info generation for this package]),
	      [if "x$enableval" = "xyes"; then \
	           ENABLE_PROFILING=1; \
	       else \
	           ENABLE_PROFILING=0; \
	       fi],
	      [ENABLE_PROFILING=0])
AC_SUBST(ENABLE_PROFILING)
AC_ARG_ENABLE(vmi-debug,
	      AS_HELP_STRING([--disable-vmi-debug],
                             [Disable debug output for (non-xenaccess parts of) this package]),
	      [if "x$enableval" = "xno"; then \
	           ENABLE_VMI_DEBUG=0; \
	       else \
	           ENABLE_VMI_DEBUG=1; \
	       fi],
	      [ENABLE_VMI_DEBUG=1])
AC_SUBST(ENABLE_VMI_DEBUG)

#
# Check for disabled java support
#
ENABLE_JAVA=1
AC_ARG_ENABLE(java,
	      AS_HELP_STRING([--disable-java],
                             [Disable java XML SOAP client support]),
	      [if test "x$enableval" = "xno"; then \
	           ENABLE_JAVA=0; \
	       else \
	           ENABLE_JAVA=1; \
	       fi],
	      [ENABLE_JAVA=1])
AC_SUBST(ENABLE_JAVA)

#
# If enabled, we need javac, java, jar, and ant; JAVA_HOME, AXIS2_HOME, and 
# $AXIS2_HOME/bin/wsdl2java.sh .
#
if test "${ENABLE_JAVA}" = "1"; then
    #
    # --with-java
    #
    AC_ARG_WITH([java],
                 AS_HELP_STRING([--with-java=DIRECTORY],
                                [find java install in DIRECTORY]),
                 [JAVA_HOME="$with_java"])

    #
    # JAVA_HOME, java, javac
    #
    if test -z "${JAVA_HOME}" ; then
        AC_PATH_PROG(JAVA,java)
	if test -z "$JAVA" ; then
	    AC_MSG_ERROR([no java found in \$PATH])
        fi
        AC_PATH_PROG(JAVAC,javac)
	if test -z "${JAVAC}" ; then
	    AC_MSG_ERROR([no javac found in \$PATH])
        fi
        AC_PATH_PROG(JAR,jar)
	if test -z "${JAR}" ; then
	    AC_MSG_ERROR([no jar found in \$PATH])
        fi
        AC_PATH_PROG(JDB,jdb)
	if test -z "${JDB}" ; then
	    AC_MSG_ERROR([no jdb found in \$PATH])
        fi

	# assuming we don't error out, extract JAVA_HOME, we need it set
	JAVA_HOME=`echo "${JAVA}" | sed -e 's/\(\/bin\/java\)//'`
    else
        #
        # Check for bin/java and bin/javac
        #
	if ! test -x "${JAVA_HOME}/bin/java"; then
	    AC_MSG_ERROR("No java in ${JAVA_HOME}/bin!")
        fi
        JAVA="${JAVA_HOME}/bin/java"
	if ! test -x "${JAVA_HOME}/bin/javac"; then
	    AC_MSG_ERROR("No javac in ${JAVA_HOME}/bin!")
        fi
	JAVAC="${JAVA_HOME}/bin/javac"
	if ! test -x "${JAVA_HOME}/bin/jar"; then
	    AC_MSG_ERROR("No jar in ${JAVA_HOME}/bin!")
        fi
	JAR="${JAVA_HOME}/bin/jar"
	if ! test -x "${JAVA_HOME}/bin/jdb"; then
	    AC_MSG_ERROR("No jdb in ${JAVA_HOME}/bin!")
        fi
	JDB="${JAVA_HOME}/bin/jdb"
    fi
    AC_SUBST(JAVA_HOME)
    AC_SUBST(JAVA)
    AC_SUBST(JAVAC)
    AC_SUBST(JAR)
    AC_SUBST(JDB)

    #
    # ant
    #
    AC_ARG_WITH([ant],
                 AS_HELP_STRING([--with-ant=DIRECTORY],
                                [find ant install in DIRECTORY]),
                 [ANT_HOME="$with_ant"])
    if test -d "${ANT_HOME}" ; then
	if ! test -x "${ANT_HOME}/bin/ant" ; then
	    AC_MSG_ERROR([no ant found in ${ANT_HOME}/bin])
        fi
    else
        #
        # Check /usr/local/apache-ant* and /opt/apache-ant*
        #
	for ant in /usr/local/apache-ant* /opt/apache-ant*; do
	   if test -x "$ant/bin/ant"; then
	       ANT_HOME="$ant"
               break
           fi
        done
	if test -z "${ANT_HOME}"; then
	    AC_MSG_ERROR("Cannot find ant install in /usr/local or /opt!")
        fi
    fi
    ANT="${ANT_HOME}/bin/ant"
    AC_SUBST(ANT)

    #
    # axis2
    #
    AC_ARG_WITH([axis2],
                 AS_HELP_STRING([--with-axis2=DIRECTORY],
                                [find axis2 install in DIRECTORY]),
                 [AXIS2_HOME="$with_axis2"])
    if test -d "${AXIS2_HOME}" ; then
	if ! test -x "${AXIS2_HOME}/bin/wsdl2java.sh" ; then
	    AC_MSG_ERROR([no wsdl2java.sh found in ${AXIS2_HOME}/bin])
        fi
    else
        #
        # Check /usr/local/axis* and /opt/axis*
        #
	for axis in /usr/local/axis* /opt/axis*; do
	   if test -x "$axis/bin/wsdl2java.sh"; then
	       AXIS2_HOME="$axis"
               break
           fi
        done
	if test -z "${AXIS2_HOME}"; then
	    AC_MSG_ERROR("Cannot find axis2 install in /usr/local or /opt!")
        fi
    fi
    AC_SUBST(AXIS2_HOME)
fi


#
# Check for JAVA_HOME/AXIS2_HOME, and $AXIS2_HOME/bin/wsdl2java.sh .
#

outfiles="$outfiles Makeconf Makefile lib/Makefile dwdebug/Makefile \
          target/Makefile tests/Makefile analysis/Makefile \
	  xml/Makefile xml/schema/Makefile xml/service/Makefile \
	  xml/client/Makefile xml/client/python/Makefile \
          xml/client/java/Makefile \
	  tools/Makefile tools/rop/Makefile tools/cfi/Makefile tools/bts/Makefile \
          xenaccess/Makefile vmprobes/Makefile vmprobes/examples/Makefile \
          vmfs/Makefile vmps/Makefile vmtap/Makefile xentt/Makefile \
          examples/nfs-perf-analysis/Makefile \
          examples/perf-model-test/Makefile \
          examples/context-aware-probes/Makefile \
          examples/context-tracker/Makefile \
          examples/context-tracker/examples/Makefile \
          examples/context-tracker/examples/dumpcontext/Makefile \
          examples/context-tracker/examples/null-deref-analysis/Makefile \
          examples/null-deref-analysis/Makefile \
          examples/local-dos-analysis/Makefile"

#
# Do this for easy distclean.
#
DISTCLEAN_FILES="$outfiles"
AC_SUBST(DISTCLEAN_FILES)

AC_OUTPUT($outfiles)
