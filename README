-*- mode: Text -*-

To build this software, you must have installed

  * glib (>= 2.29.10, I believe);
  * elfutils (>= 0.137 should be fine, but ideally you will want
    something much newer, such as 0.152; also note that if you
    use this library on a DWARF version 4-encoded file, and build
    against elfutils <= 0.141, many things will probably break);
  * Judy

Optionally, you could also install

  * distorm (although you lose lots of functionality, including the CFI
    checker utility, and the Return-Oriented-Programming exploit checker);
  * xenaccess (which requires Xen libs like xenctrl, xs)

to include support for x86 and x86_64 disassembly, and Xen target
backends, respectively;

and/or 

  * gsoap-2.8.11 (for SOAP XML service generation; also necessary for
    clients; must apply our patches);
  * python-suds and pysimplesoap (for SOAP XML python clients; must
    apply our patch to pysimplesoap);
  * a 1.6-era Java SDK, Apache Ant, and Apache Axis2 (for SOAP XML java
    clients)

In the following two sections, we provide instructions for building
dependencies, followed by instructions for building this package.


BUILDING dependencies.


  glib:

Grab /proj/a3/vmi-deps/glib-2.30.2.tar.bz2
(http://ftp.gnome.org/pub/gnome/sources/glib/2.30/glib-2.30.2.tar.bz2);
unpack; and configure like this:

  $ ./configure --prefix=/opt/vmi/glib

We suggest you put glib in /opt to prevent other system binaries from
being linked with it.  This could happen if you install it to
/usr/local, since your LD configuration might include /usr/local/lib.
This would be bad, so use /opt.

Then make, install like normal.


  elfutils:

Grab /proj/a3/vmi-deps/elfutils-0.152.tar.bz2
(https://fedorahosted.org/releases/e/l/elfutils/0.152/elfutils-0.152.tar.bz2);
unpack; and configure like this (but see note below first!):

  $ ./configure --prefix=/opt/vmi/elfutils --with-zlib --with-bzlib \
        --enable-debugpred

(you can also add the `--program-prefix=vmi-eu-' argument so that you
don't have confusion between `readelf' and other binaries from the
system elfutils... but this should not happen if you install to
/opt/vmi/elfutils, since /opt/vmi/elfutils/usr/bin is probably not going
to be in your PATH!).

NOTE: if you are building on an ancient Linux (i.e., Fedora 8), you may
need some additional patches when building elfutils.  If you are
building on Emulab, you can find these at

  /proj/a3/vmi-deps/elfutils-portability.patch 
    (https://fedorahosted.org/releases/e/l/elfutils/0.152/elfutils-portability.patch)
  /proj/a3/vmi-deps/elfutils-robustify.patch
    (https://fedorahosted.org/releases/e/l/elfutils/0.152/elfutils-robustify.patch)

Just apply them in this order, then configure, make, and install


  distorm:

You can either copy the /proj/a3/vmi-deps/distorm dir to your node, and
do

  $ cd distorm/make/linux ; make clean ; make install

(distorm does not install its headers correctly)

  $ cd ../..; cp -p distorm/include/* /usr/local/include

Alternately, you can download distorm from
http://code.google.com/p/distorm/downloads/detail?name=distorm3-1.0.zip .

You may need to edit its build config or Makefiles to change the prefix
to /usr/local (or wherever you like).


  Judy:

Grab either /proj/a3/vmi-deps/ or
http://downloads.sourceforge.net/project/judy/judy/Judy-1.0.5/Judy-1.0.5.tar.gz .
configure, make, install (if you change the build prefix to anything
other than /usr or /usr/local, tell vmi's configure about it via
--with-judy=/my/prefix .


  gsoap:

Grab either /proj/a3/vmi-deps/gsoap_2.8.11.zip or get it from
http://www.cs.fsu.edu/~engelen/soap.html .  Apply the
gsoap-2.8.11-noserve.patch and gsoap-2.8.11-xs-include-to-module.patch
in the VMI src in vmi/xml/etc .  Then configure, make, install (if you
change the build prefix to anything other than /usr, tell vmi's
configure about it via --with-gsoap=/my/prefix .


  python-suds:

Grab either /proj/a3/vmi-deps/python-suds-0.4.tar.gz or get it from
https://fedorahosted.org/suds/ , or install it via your distro's package
management tool.  If installing from source, install *using python 2.x*
via the standard dance of (cd python-suds-0.4 ; python2 setup.py build ;
python2 setup.py install).


  pysimplesoap:

Grab either /proj/a3/vmi-deps/pysimplesoap-HG.tar.gz, or clone
the latest pysimplesoap from http://code.google.com/p/pysimplesoap/ .
Unpack it, then apply pysimplesoap-soap-env.patch in vmi/xml/etc in the
VMI src dir.  Then install *using python2* via the standard dance of 
(cd pysimplesoap ; python2 setup.py build ; python2 setup.py install).


  Apache Ant and Axis2:

Grab them from
/proj/a3/vmi-deps/{apache-ant-1.8.4-bin.zip,axis2-1.6.2-bin.zip}, or
from http://ant.apache.org/ and http://axis.apache.org/axis2/java/core/ .
Unpack them and place them anywhere (/usr/local or /opt are checked by
the VMI configure script, or tell vmi where they are via --with-ant and
--with-axis2).  If there is no Java in your $PATH, you'll also have to
tell VMI's configure --with-java .



BUILDING vmi.

  $ cd vmi ; autoconf ; cd ..
  $ mkdir vmi.obj ; cd vmi.obj
  $ ../vmi/configure --prefix=/usr/local --with-glib=/opt/vmi/glib \
        --with-distorm=/usr/local --with-elfutils=/opt/vmi/elfutils
  $ make

and hopefully things should work.  

Once it builds, you should be able to run

  $ sudo LD_LIBRARY_PATH=/opt/vmi/elfutils/lib:/opt/vmi/glib/lib:/usr/local/lib:/usr/lib \
        target/dumptarget -m <vm_name> sys_open

and watch things happen.

There is also the `dwdebug/dumpdebuginfo' program that you can run on a 
single ELF file containing .debug_info section(s); it will dump most of
the symbol information it reads if you pass it the '-D' and '-M' args.
